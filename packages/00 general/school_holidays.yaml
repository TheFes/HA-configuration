# =============================================================================
# PACKAGE: Dutch School Holidays
# PURPOSE: Track Dutch school holidays using official government API
# DEPENDENCIES: Rijksoverheid school holidays API, Region input select
# LAST UPDATED: 2024-06-26
# =============================================================================

# OVERVIEW:
# This package fetches and tracks Dutch school holidays using the official
# Rijksoverheid API. It provides a binary sensor that indicates when it's
# currently a school holiday and shows upcoming holidays for the school year.

# ENTITIES CREATED:
# Input Selects:
# - input_select.region - Region selection (Noord, Midden, Zuid)
#
# Rest Commands:
# - rest_command.school_holidays - API data fetcher
#
# Binary Sensors:
# - binary_sensor.schoolvakantie - Current holiday status
#
# Attributes Available:
# - regio: Selected region
# - nu: Current holiday type or "Geen vakantie"
# - vakanties: List of upcoming holidays for current school year

# EXTERNAL DEPENDENCIES:
# - API: https://opendata.rijksoverheid.nl/v1/infotypes/schoolholidays
# - Event: update_school_holidays - Manual update trigger

# SCHOOL REGIONS:
# - Noord (North): Northern Netherlands
# - Midden (Middle): Central Netherlands
# - Zuid (South): Southern Netherlands

# HOLIDAY TYPES:
# Common holidays include Zomervakantie, Kerstvakantie, Voorjaarsvakantie,
# Meivakantie, Herfstvakantie, and various other regional holidays.

# UPDATE SCHEDULE:
# - Daily at midnight (00:00) - Automatic refresh
# - Manual: Fire update_school_holidays event

# CONFIGURATION NOTES:
# Line 38: Default region selection - update input_select.region as needed
# Lines 61-89: Holiday processing logic - handles compulsory vs optional dates
# API returns data for entire calendar year with regional variations

# =============================================================================
# REGION SELECTION AND API CONFIGURATION
# =============================================================================

# input_select to select the correct region (North, Middle or South)
input_select:
  region:
    name: Regio Schoolvakanties
    options:
      - Noord
      - Midden
      - Zuid
    icon: mdi:map-marker

# =============================================================================
# API DATA FETCHING
# =============================================================================
# Rest Command to get the data from the endpoint
rest_command:
  school_holidays:
    url: https://opendata.rijksoverheid.nl/v1/infotypes/schoolholidays?output=json

# =============================================================================
# SCHOOL HOLIDAY DETECTION
# =============================================================================
# Binary sensor which will be "on" in case it is currently a school holiday.
# The attributes show the selected region, the current holiday and a the upcoming holidays for the current school year (next school year in case it's summer holiday)
template:
  - triggers:
      - trigger: time
        at: "00:00"
      - trigger: event
        event_type: update_school_holidays
    actions:
      - action: rest_command.school_holidays
        response_variable: holidays
      - variables:
          data: >
            {% set region = states('input_select.region') | lower %}
            {% set holidays = holidays.get('content', []) | map(attribute='content') | sum(start=[]) | map(attribute='vacations') | sum(start=[]) %}
            {% set ns = namespace(holidays={}) %}
            {% for h in holidays %}
              {% set type = h.type | trim %}
              {% set compulsory = h.compulsorydates | bool %}
              {% set date_info = h.regions | selectattr('region', 'search', region~'|heel Nederland') | first %}
              {% set start = as_local(as_datetime(date_info.startdate)).date() | string %}
              {% set end = as_local(as_datetime(date_info.enddate)).date() | string %}
              {% set year, month = as_datetime(start).year, as_datetime(start).month %}
              {% set startyear = year - 1 if month <= 8 else year %}
              {% set schoolyear = startyear ~ '-' ~ (startyear + 1) %}
              {% if end >= now().date() | string %}
                {% set yeardata = ns.holidays.get(schoolyear, []) + [dict(type=type, compulsory=compulsory, start=start, end=end)] %}
                {% set ns.holidays = dict(ns.holidays, **{schoolyear:yeardata}) %}
              {% endif %}
            {% endfor %}
            {% set yr = (ns.holidays.items() | map(attribute='1') | sum(start=[]) | selectattr('type', 'eq', 'Zomervakantie') | map(attribute='start') | list | first | as_datetime).year %}
            {% set current_sy = (yr - 1) ~ '-' ~ yr %}
            {% set current = ns.holidays.get(current_sy, []) | selectattr('start', '<=', now().date() | string) | selectattr('end', '>=', now().date() | string) | first | default({}) %}
            {% set upcoming = ns.holidays.get(current_sy, []) | rejectattr('type', 'eq',current.get('type')) | list %}
            {% set upcoming = upcoming if upcoming else ns.holidays.get(current_sy.split('-') | map('add', 1) | map('int') | join('-'), []) %}
            {% set data = dict(current=current, upcoming=upcoming) %}
            {{ data }}
    binary_sensor:
      unique_id: 4d816314-1eaf-41d0-ab16-ec3c57bac38f5
      name: Schoolvakantie
      state: "{{ iif(data.current) }}"
      attributes:
        regio: "{{ states('input_select.region') }}"
        nu: "{{ data.current.get('type', 'Geen vakantie')}}"
        vakanties: "{{ data.upcoming }}"
