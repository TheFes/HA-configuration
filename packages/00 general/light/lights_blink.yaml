# Script to perform blink action
script:
  # script to perform Slow Pulse and Fast Pulse effect for unsupported lights
  light_blink:
    alias: "Light blink"
    mode: parallel
    fields:
      light:
        description: "Select the light"
        name: Light
        example: light.livingroom
        required: true
        selector:
          entity:
            domain: light
            multiple: false
      toggle_entity:
        description: "Select the entity to toggle"
        name: Entity to toggle
        example: switch.livingroom
        required: false
        selector:
          entity:
            multiple: false
      effect:
        description: Effect
        example: Fast Pulse
        required: true
        selector:
          select:
            options:
              - None
              - Fast Pulse
              - Slow Pulse
    sequence:
      - event: light_effect_blink
        event_data:
          light: "{{ light }}"
          effect: "{{ effect }}"
      - delay: 0.1
      - if: "{{ effect not in ['None', None] }}"
        then:
          - alias: Set variables for repeat loop
            variables:
              repeat_max: "{{ 20 if effect == 'Fast Pulse' else 10 }}"
              repeat_delay: "{{ 0.5 if effect == 'Fast Pulse' else 1 }}"
              current_effect: >
                {{
                  (state_attr('sensor.blink_effect_active', 'blink_active')
                    | default({}, true)).get(light, 'None')
                }}
          - alias: "Blink loop"
            repeat:
              while: "{{ repeat.index <= repeat_max and effect == current_effect }}"
              sequence:
                - variables:
                    domain: "{{ toggle_entity.split('.')[0] }}"
                - alias: "Blink"
                  action: "{{ domain }}.toggle"
                  data:
                    entity_id: "{{ toggle_entity }}"
                - alias: "Short delay between toggle"
                  delay: "{{ repeat_delay }}"
                - alias: "Reset current effect variable"
                  variables:
                    current_effect: >
                      {{
                        (state_attr('sensor.blink_effect_active', 'blink_active')
                          | default({}, true)).get(light, 'None')
                      }}
      - alias: Turn on the light
        action: light.turn_on
        target:
          entity_id: "{{ light }}"
      - event: light_effect_blink
        event_data:
          light: "{{ light }}"

  # script to blink lights in case of an alert (eg doorbell)
  light_blink_alert:
    alias: "Blink lights to alert"
    icon: mdi:alert
    mode: single
    max_exceeded: silent
    variables:
      blink:
        always:
          - light.eettafel_template
          - light.tv_lamp_template
          - light.hal
          - light.overloop
          - light.badkamer_zolder_template
          - light.werkkamer_marleen_template
          - light.badkamer
        only_on:
          - light.slaapkamer_plafond_template
          - light.pepijn_template
          - light.graafmachine
          - light.floris
          - light.leeslamp_floris
          - light.werkkamer_martijn_plafond_template
      hue:
        - light.floris
        - light.leeslamp_floris
    sequence:
      - alias: "Determine which lights are one and should blink"
        variables:
          lights: >
            {{ blink.only_on | select('is_state', 'on') | list + blink.always }}
          effect: >
            {{
              expand(lights)
                | rejectattr('entity_id', 'in', 'hue')
                | selectattr('attributes.effect_list', 'defined')
                | selectattr('attributes.effect_list', 'contains', 'Slow Pulse')
                | map(attribute='entity_id')
                | list
            }}
          other: "{{ lights | reject('in', hue + effect) | list}}"
      - alias: "Create scene with current state"
        action: scene.create
        data:
          scene_id: before
          snapshot_entities: "{{ lights }}"
      - alias: "Hue lights to blink?"
        if: "{{ lights | select('in', hue) | list | count > 0 }}"
        then:
          - alias: "Blink lights (hue_lights)"
            action: light.turn_on
            target:
              entity_id: "{{ lights | select('in', hue) | list }}"
            data:
              flash: long
      - alias: "Lights with pulse effecst"
        if: "{{ effect | count > 0 }}"
        then:
          - alias: "Blink lights"
            action: light.turn_on
            target:
              entity_id: "{{ effect }}"
            data:
              effect: "Slow Pulse"
      - alias: "Others lights to blink?"
        if: "{{ other | count > 0 }}"
        then:
          - repeat:
              for_each: "{{ other }}"
              sequence:
                - action: script.turn_on
                  target:
                    entity_id: script.light_blink
                  data:
                    variables:
                      light: "{{ repeat.item }}"
                      effect: "{{ effect }}"
          - alias: "Blink other lights using repeat loop"
            repeat:
              count: 10
              sequence:
                - alias: "Toggle other lights"
                  action: light.toggle
                  data:
                    entity_id: "{{ other }}"
                - alias: "Short delay between toggle"
                  delay: 0.5
      - delay:
          seconds: 10
      - alias: "Disable blinking"
        action: light.turn_on
        data:
          effect: "None"
        target:
          entity_id: "{{ effect | select('is_state', 'on') | list }}"
      - delay: 0.5
      - alias: "Restore state"
        action: scene.turn_on
        target:
          entity_id: scene.before

template:
  # Template sensor to store lights for which script is active
  - triggers:
      - trigger: event
        event_type: light_effect_blink
    sensor:
      - unique_id: 7b25c899-ec7d-48f3-b9c4-3f7fb7a08a68
        name: Blink Effect Active
        state: OK
        attributes:
          blink_active: >
            {% set current = this.attributes.get('blink_active', {}) %}
            {% set others = dict(current.items() | rejectattr('0', 'eq', trigger.event.data.light)) %}
            {% if trigger.event.data.effect is defined and trigger.event.data.light is defined %}
              {% set add = {trigger.event.data.light: trigger.event.data.effect} %}
              {{ others | combine(add) }}
            {% elif trigger.event.data.light is defined %}
              {{ others }}
            {% else %}
              {{ current }}
            {% endif %}

  - use_blueprint:
      path: TheFes/switch_to_light.yaml
      input:
        switch: switch.wereldbol
        icon_on: game-icons:globe
        icon_off: game-icons:globe
        default_entity_id: light.wereldbol
    unique_id: 780b45cb-4f49-4879-babb-76483c7cab50

  - use_blueprint:
      path: TheFes/switch_to_light.yaml
      input:
        switch: switch.tuinlampjes
        icon_on: mdi:string-lights
        icon_off: mdi:string-lights-off
        default_entity_id: light.tuinlampjes
    unique_id: a5171e0b-ff8b-459d-ba5e-24d25c10bc4e

  - use_blueprint:
      path: TheFes/switch_to_light.yaml
      input:
        switch: switch.bedlamp_floris
        icon_on: mdi:desk-lamp
        icon_off: mdi:desk-lamp-off
        default_entity_id: light.bedlamp_floris
    unique_id: 7a53d2ed-34a8-4f50-bbf8-69987f242d7b

  - use_blueprint:
      path: TheFes/switch_to_light.yaml
      input:
        switch: switch.bed_pepijn
        icon_on: mdi:string-lights
        icon_off: mdi:string-lights-off
        default_entity_id: light.bed_pepijn
    unique_id: 092c7ec4-ef29-47a2-bded-9c5aaafceae7

  - use_blueprint:
      path: TheFes/switch_to_light.yaml
      input:
        switch: switch.keukenspotjes
        icon_on: mdi:light-recessed
        icon_off: mdi:light-recessed
        default_entity_id: light.keukenspotjes
    unique_id: bd5234e0-2e57-435b-aff3-c901585fbe1b

  - use_blueprint:
      path: TheFes/switch_to_light.yaml
      input:
        switch: switch.tv_lamp
        icon_on: mdi:floor-lamp-dual
        icon_off: mdi:floor-lamp-dual-outline
        default_entity_id: light.tv_lamp
    unique_id: 3f079367-7d59-45a5-96f6-a97881472e46

  - use_blueprint:
      path: TheFes/switch_to_light.yaml
      input:
        switch: switch.shelly1pm_booglamp_relay
        icon_on: mdi:floor-lamp
        icon_off: mdi:floor-lamp
        default_entity_id: light.booglamp
    unique_id: 85d30c5c-f581-40bd-a048-162d10dcfd60

  - use_blueprint:
      path: TheFes/switch_to_light.yaml
      input:
        switch: switch.shelly_badkamerspiegel_relay
        icon_on: mdi:mirror-rectangle
        icon_off: mdi:mirror-rectangle
        default_entity_id: light.badkamerspiegel
    unique_id: 4ba1e527-8550-4118-8e6c-e191273f100c

  - use_blueprint:
      path: TheFes/switch_to_light.yaml
      input:
        switch: switch.shelly1_technische_ruimte_relay
        icon_on: mdi:wall-sconce-flat
        icon_off: mdi:wall-sconce-flat-outline
        default_entity_id: light.technishe_ruimte
    unique_id: 167b02e7-eae5-4203-b964-a09098e0f417

  - use_blueprint:
      path: TheFes/switch_to_light.yaml
      input:
        switch: switch.sonoff_badkamerspiegel_zolder_relay
        icon_on: mdi:wall-sconce-flat
        icon_off: mdi:wall-sconce-flat-outline
        default_entity_id: light.badkamerspiegel_zolder
    unique_id: f6ca2c05-ccea-478f-b4f9-e361688e5f5c
