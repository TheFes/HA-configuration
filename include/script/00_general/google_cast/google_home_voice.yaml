# Script to receive a TTS on a Google Home on which you just asked a question
# for more details: https://community.home-assistant.io/t/script-to-send-tts-to-the-right-google-home-based-on-voice-commands/346885
#
google_home_voice:
  alias: "00 - TTS for Google Home based on voice command"
  icon: mdi:cast-audio
  mode: single
  max_exceeded: silent
  variables:
    check_for_title: "Witte ruis"
  sequence:
    - variables:
        version: 1.5.0
    - alias: "Are there Spotify entities?"
      if: "{{ integration_entities('spotify') | count > 0 }}"
      then:
        - alias: "Update Spotify entities"
          service: homeassistant.update_entity
          target:
            entity_id: "{{ integration_entities('spotify') }}"
    - variables:
        service_calls: >
          {%- set ns = namespace(service = []) %}
          {%- for item in action %}
            {%- if item.get('service', 'uhoh') != 'uhoh' %}
              {%- set ns.service = ns.service + [ item ] %}
            {%- endif %}
          {%- endfor %}
          {{ ns.service }}
        no_service_count: >
          {{ action | reject('in', service_calls) | list | count }}
        player_data: >
          {%- set ns = namespace(info=[]) %}
          {%- for entity in expand(integration_entities('cast')) %}
              {%- set general = dict(
                                      data_source = 'voice_script',
                                      entity_id = entity.entity_id,
                                      state = entity.state
                                      )
              %}
              {%- if entity.attributes.app_name == 'Spotify' %}
                {%- set additional = dict(
                                          app_name = 'Spotify',
                                          volume_level = entity.attributes.volume_level,
                                          media_position =  as_timestamp(now()) | round(2)
                                                            - as_timestamp(entity.attributes.get('media_position_updated_at', now())) | round(2) 
                                                            + entity.attributes.get('media_position', 0)
                                          )
                %}
              {%- elif entity.attributes.app_name in ['YouTube', 'YouTube Music'] %}
                {%- set additional = dict(
                                          app_name = entity.attributes.app_name,
                                          volume_level = entity.attributes.volume_level,
                                          media_content_id = entity.attributes.get('media_content_id', 'no media_content'),
                                          media_position =  as_timestamp(now()) | round(2)
                                                            - as_timestamp(entity.attributes.get('media_position_updated_at', now())) | round(2) 
                                                            + entity.attributes.get('media_position', 0)
                                          )
                %}
              {%- elif entity.state == 'playing' %}
                {%- set additional = dict(
                                          app_name = entity.attributes.app_name,
                                          volume_level = entity.attributes.volume_level,
                                          media_content_id = entity.attributes.get('media_content_id', 'no media_content'),
                                          media_title = entity.attributes.get('media_title', 'no title'),
                                          media_artist = entity.attributes.get('media_artist', 'no artist'),
                                          media_content_type = entity.attributes.get('media_content_type', 'no type'),
                                          entity_picture = entity.attributes.get('entity_picture', 'no pic'),
                                          media_position =  as_timestamp(now()) | round(2)
                                                            - as_timestamp(entity.attributes.get('media_position_updated_at', now())) | round(2) 
                                                            + entity.attributes.get('media_position', 0)
                                          )
                %}
              {%- endif %}
            {% set ns.info = ns.info + [ dict(general, **additional) if additional is defined else general ] %}
          {%- endfor %}
          {{ ns.info }}
        ytube_music_data: >
          {%- set ns = namespace(ytube = []) %}
          {%- for item in expand(integration_entities('ytube_music_player'))
                          | selectattr('state', 'eq', 'playing')
          %}
            {%- set ns.ytube = ns.ytube + [
                                            dict(
                                                  player = item.entity_id,
                                                  target = item.attributes.remote_player_id,
                                                  position =  as_timestamp(now()) | round(2)
                                                              - as_timestamp(entity.attributes.get('media_position_updated_at', now())) | round(2) 
                                                              + entity.attributes.get('media_position', 0),
                                                  data_source = 'voice_script'
                                                )
                                          ]
            %}
          {%- endfor %}
          {{ ns.ytube }}
        spotify_data: >
          {%- set entities = expand(integration_entities('spotify'))
                              | selectattr('state', 'eq', 'playing')
          %}
          {%- set ns = namespace(info=[]) %}
          {%- for entity in entities %}
            {%- set ns.info = ns.info + [
                                          dict(
                                                entity_id = entity.entity_id, 
                                                source = entity.attributes.source,
                                                data_source = 'voice_script'
                                              ) 
                                        ] 
            %}
          {%- endfor %}
          {{ ns.info }}
    - alias: "Interrupt YouTube music if needed"
      if: "{{ ytube_music_data | count > 0 }}"
      then:
        - service: ytube_music_player.call_method
          data:
            entity_id: "{{ ytube_music_data | map(attribute='player') | list }}"
            command: interrupt_start
    - alias: "Wait until white noise started"
      wait_template: >
        {{ 
          expand(states.media_player)
            | selectattr('attributes.media_title', 'eq', check_for_title)
            | map(attribute='entity_id')
            | list
            | count > 0
        }}
    - variables:
        target: >
          {{
            expand(states.media_player)
              | selectattr('attributes.media_title', 'eq', check_for_title)
              | map(attribute='entity_id')
              | join
          }}
        target_list: >
          {%- if target_conversion is defined and target_conversion %}
            {%- set new = target_conversion.get(target, target) %}
            {{ new.replace(' ', '').split(',') if new is string else new }}
          {%- else %}
            {{ [ target ] }}
          {%- endif %}
    - alias: "Stop ambient sound"
      service: media_player.media_stop
      target:
        entity_id: "{{ target }}"
    - alias: "Wrong actions provided"
      choose:
        - conditions: "{{ service_calls | count == 0 }}"
          sequence:
            - stop: "There were no service calls defined, no actions are performed. The script script has been aborted."
              error: true
        - conditions: "{{ no_service_count > 0 }}"
          sequence:
            - service: system_log.write
              data:
                level: "warning"
                logger: "{{ this.entity_id }}"
                message: >
                  {{ no_service_count }} out of {{ service_calls | count }} actions were not performed because they are not service calls.
    - wait_template: "{{ is_state(target, 'idle') }}"
    - alias: "Use resume script or perform actions"
      if: "{{ use_resume if use_resume is defined else true }}"
      then:
        - alias: "Send actions using Google Home Resume script"
          service: script.turn_on
          target:
            entity_id: script.google_home_resume
          data:
            variables:
              target_list: "{{ target_list }}"
              player_data: "{{ player_data }}"
              spotify_data: "{{ spotify_data }}"
              ytube_music_data: "{{ ytube_music_data }}"
              action: >
                {%- set ns = namespace(action=[]) %}
                {%- for item in service_calls %}
                  {%- set data = item.get('data', {}) %}
                  {%- set extra = item.get('extra', {}) %}
                  {%- set service = item.service %}
                  {%- if target_variable is defined and target_variable %}
                    {%- if service == 'script.turn_on' %}
                      {% set add = {'voice_target': target_list[0]} %}
                      {% set var = dict(variables = dict(data.get('variables', {}), **add)) %}
                      {% set data = dict(data, **var) %}
                    {%- elif service.split('.')[0] == 'script' %}
                      {% set add = { 'voice_target': target_list[0]} %}
                      {% set data = dict(data, **add) %}
                    {%- endif %}
                    {%- set add = {'entity_id': target_list[0]} %}
                    {%- set extra = dict(extra, **add) %}
                  {%- endif %}
                  {%- set ns.action = ns.action + [
                                                    dict(
                                                      service = service,
                                                      target = item.get('target', { 'entity_id' : target_list}),
                                                      data = data,
                                                      extra = extra
                                                      )
                                                  ]
                  %}
                {%- endfor %}
                {{ ns.action }}
      else:
        - alias: "Perform service calls defined in action"
          repeat:
            for_each: "{{ service_calls }}"
            sequence:
              - variables:
                  data: >
                    {%- set data = repeat.item.get('data', {}) %}
                    {%- set service = repeat.item.service %}
                    {%- if target_variable is defined and target_variable %}
                      {%- if service == 'script.turn_on' %}
                        {% set add = {'voice_target': target_list[0]} %}
                        {% set var = dict(variables = dict(data.get('variables', {}), **add)) %}
                        {{ dict(data, **var) }}
                      {%- elif service.split('.')[0] == 'script' %}
                        {% set add = { 'voice_target': target_list[0]} %}
                        {{ dict(data, **add) }}
                      {%- else %}
                        {{ data }}
                      {%- endif %}
                    {%- else %}
                      {{ data }}
                    {%- endif %}
              - service: "{{ repeat.item.service }}"
                target: "{{ repeat.item.get('target', { 'entity_id': target_list}) }}"
                data: "{{ data }}"
    - alias: "Volume defined"
      if: "{{ volume is defined and iif(volume) }}"
      then:
        - alias: "Apply volume"
          service: media_player.volume_set
          target:
            entity_id: "{{ target_list }}"
          data:
            volume_level: >
              {{ [1, volume if volume <= 1 else volume / 100] | min }}
