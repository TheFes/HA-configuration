# =============================================================================
# PACKAGE: Advanced Lighting Control System
# PURPOSE: Automated color temperature, brightness control, and template lights
# DEPENDENCIES: Zigbee lights, Input booleans
# LAST UPDATED: 2024-06-27
# =============================================================================

# OVERVIEW:
# This package provides advanced lighting control including dynamic color temperature
# based on brightness, custom light templates for difficult devices, and light
# level detection sensors. Light transitions are handled in light_transition.yaml.

# ENTITIES CREATED:
# Automations:
# - automation.change_color_temperature_of_lights_based_on_brightness - Dynamic color temp
# 
# Template Lights:
# - light.planeet - Template light for Planeet device with power monitoring
#
# Binary Sensors:
# - binary_sensor.light_inside - Living room light level detection
# - binary_sensor.pepijn_light_inside - Pepijn's room light level detection

# EXTERNAL DEPENDENCIES:
# - Integration: Zigbee2MQTT - For light device control
# - Entity: light.eettafel, light.pepijn, light.floris, light.tv_lamp, light.speelhoek, light.bedside_lamp - Target lights
# - Entity: switch.planeet - Physical switch for Planeet light
# - Entity: sensor.planeet_power - Power consumption monitoring
# - Entity: sensor.woonkamer_lux_illuminance_lux - Living room light sensor
# - Entity: input_boolean.dimmed_* - Dimming state trackers
# - Entity: input_number.light_inside - Light threshold setting

# CONFIGURATION NOTES:
# Lines 75-88: Light overrides - customize min brightness and color temp per light
# Lines 122-129: Planeet light power thresholds and timing
# Lines 168-172: Light inside thresholds (living room: input_number, Pepijn: 10 lux)

# FEATURES:
# - Dynamic color temperature: Warmer when dimmed, cooler when bright
# - Planeet light: Special handling for unreliable smart switch with power monitoring
# - Light level detection: Binary sensors for natural light levels
# - Transition integration: Checks for active transitions to prevent conflicts

# =============================================================================
# DYNAMIC COLOR TEMPERATURE CONTROL
# =============================================================================
automation:
  - id: f0fc0c8c-662d-4477-9002-5ec4b49da7ba
    alias: "Change color temperature of lights based on brightness"
    mode: parallel
    max_exceeded: silent
    triggers:
      - trigger: state
        entity_id:
          - light.eettafel
          - light.pepijn
          - light.floris
          - light.tv_lamp
          - light.speelhoek
          - light.bedside_lamp
        attribute: brightness
    variables:
      name: "{{ trigger.to_state.object_id }}"
      overrides:
        example_light:
          min_ct: 2000
          max_ct: 6500
        eettafel:
          min_br: 37
        pepijn:
          min_br: 37
        floris:
          min_br: 37
        tv_lamp:
          min_br: 37
        speelhoek:
          min_br: 37
      input_boolean_dimmed: "{{ 'input_boolean.dimmed_' + name }}"
      light: "{{ trigger.entity_id }}"
      max_ct: "{{ overrides.get(name, {}).get('max_ct') | default(state_attr(light, 'max_color_temp_kelvin'), true) }}"
      min_ct: "{{ overrides.get(name, {}).get('min_ct') | default(state_attr(light, 'min_color_temp_kelvin'), true) }}"
      min_br: "{{ overrides.get(name, {}).get('min_br') | default(1, true) }}"
      max_br: "{{ overrides.get(name, {}).get('max_br') | default(255, true) }}"
      br: "{{ state_attr(trigger.entity_id, 'brightness') }}"
      color_mode: "{{ state_attr(light, 'color_mode') | default('color_temp', true) }}"

    conditions:
      - alias: "Light on?"
        condition: template
        value_template: "{{ trigger.to_state.state == 'on' and trigger.from_state.state == 'on' }}"
      - alias: "Already dimmed before?"
        condition: template
        value_template: "{{ not is_state(input_boolean_dimmed, 'off') }}"
      - alias: "Light on color_temp mode?"
        condition: template
        value_template: "{{ color_mode == 'color_temp' }}"
      - alias: "No transition active"
        condition: template
        value_template: "{{ state_attr('group.transition_active', 'entity_id') | default([], true) | select('search', light | replace('_template', '')) | list | count == 0 }}"
    actions:
      - alias: "Set color temperature based on brightness"
        action: light.turn_on
        target:
          entity_id: "{{ light }}"
        data:
          color_temp_kelvin: >
            {{ [max_ct, min_ct + ((br-min_br) * (max_ct - min_ct) / (max_br-min_br)) | int] | min }}

# =============================================================================
# TEMPLATE LIGHTS
# =============================================================================
template:
  # ---------------------------------------------------------------------------
  # COMPONENT: Planeet Light Template
  # PURPOSE: Manage unreliable smart switch with power monitoring and reset logic
  # DEPENDENCIES: switch.planeet, sensor.planeet_power
  # ---------------------------------------------------------------------------
  - light:
      - name: Planeet
        unique_id: 6ba8eb34-2a08-43b0-8ea7-73505d46e883
        state: "{{ is_state('switch.planeet', 'on') }}"
        turn_off:
          - action: switch.turn_off
            target:
              entity_id: switch.planeet
        turn_on:
          - action: switch.turn_on
            target:
              entity_id: switch.planeet
          - if: "{{ now() - states.light.planeet.last_changed > timedelta(minutes=5) }}"
            then:
              - repeat:
                  count: 5
                  sequence:
                    - action: switch.turn_off
                      target:
                        entity_id: switch.planeet
                    - delay: 0.5
                    - action: switch.turn_on
                      target:
                        entity_id: switch.planeet
          - wait_template: "{{ states('sensor.planeet_power') | float > 0 }}"
            timeout:
              seconds: 10
          - if: "{{ not wait.completed }}"
            then:
              - repeat:
                  count: 5
                  sequence:
                    - action: switch.turn_off
                      target:
                        entity_id: switch.planeet
                    - delay: 0.5
                    - action: switch.turn_on
                      target:
                        entity_id: switch.planeet
        availability: "{{ 'switch.planeet' | has_value and 'sensor.planeet_power' | has_value }}"

  # ---------------------------------------------------------------------------
  # COMPONENT: Light Level Detection Sensors
  # PURPOSE: Detect natural light levels for automation triggers
  # DEPENDENCIES: Lux sensors in living room and Pepijn's room
  # ---------------------------------------------------------------------------
  - binary_sensor:
      - unique_id: 8ed58124-b19f-4453-8ae9-52458d43defb
        name: "Light inside"
        device_class: light
        state: >-
          {{ states('sensor.woonkamer_lux_illuminance_lux') | float(0) > states('input_number.light_inside') | float(0) }}
        delay_off: "00:05:00"
        delay_on: "00:05:00"

  - binary_sensor:
      - unique_id: 52564b4c-3c24-4fb5-bde7-94e6c0a9391a
        name: "Pepijn Light inside"
        device_class: light
        state: >-
          {{ states('pepijn_lux_illuminance_lux') | float(0) > 10 }}