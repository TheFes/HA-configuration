# Combined Ulanzi display automations for kids' rooms
# This file contains automations for both Pepijn and Floris' Ulanzi displays

automation:
  # Pepijn's Ulanzi display automations
  - id: dc9ec434-0886-4fd3-a504-006ca6e8ec40
    alias: "Awtrix button Pepijn"
    mode: parallel
    max_exceeded: silent
    triggers:
      - trigger: event
        event_type: awtrix_button_event
        event_data:
          area: slaapkamer_pepijn
        variables:
          event: "{{ trigger.event.data.click }}"
          button: "{{ trigger.event.data.button }}"
    actions:
      - alias: "Which click type"
        choose:
          - conditions: "{{ event == 'single' }}"
            sequence:
              - action: light.toggle
                target:
                  entity_id: >
                    {%
                      set button_map = 
                        {
                          'left': 'light.booglamp',
                          'select': 'light.bed_pepijn',
                          'right': 'light.pepijn_leeslamp'
                        }
                    %}
                    {{ button_map[button] }}
          - conditions: "{{ event == 'hold' }}"
            sequence:
              - alias: "Light off"
                action: light.turn_off
                target:
                  entity_id: >
                    {{
                      area_entities('slaapkamer_pepijn')
                        | select('in', label_entities('off_long_press'))
                        | list
                    }}
          - conditions: "{{ event == 'double' }}"
            sequence: []
          - conditions: "{{ event == 'release' }}"
            sequence: []


  - id: 1bb3f63c-c210-4299-a36e-14e70a2e6950
    alias: "Update ulanzi Pepijn"
    mode: parallel
    triggers:
      - trigger: time_pattern
        seconds: "0"
      - trigger: state
        entity_id: binary_sensor.pepijn_sleeping
        from:
          - "on"
          - "off"
        to:
          - "on"
          - "off"
      - trigger: state
        entity_id: light.awtrix_pepijn_matrix
        from:
          - "unavailable"
      - trigger: state
        entity_id:
          - weather.combined
          - input_number.correction_clock_pepijn
        to: ~
    variables:
      correction: "{{ states('input_number.correction_clock_pepijn') | float(0) }}"
    actions:
      - if: "{{ is_state('binary_sensor.pepijn_sleeping', 'on') }}"
        then:
          - if: "{{ not is_state('select.awtrix_pepijn_brightness_mode', 'Manual') }}"
            then:
              - action: select.select_option
                data:
                  option: Manual
                target:
                  entity_id: select.awtrix_pepijn_brightness_mode
          - if: "{{ not is_state_attr('light.awtrix_pepijn_matrix', 'brightness', 2) }}"
            then:
              - action: light.turn_on
                target:
                  entity_id: light.awtrix_pepijn_matrix
                data:
                  brightness: 2
          - action: mqtt.publish
            data:
              qos: 0
              retain: false
              topic: awtrix_pepijn/custom/sleep_clock
              payload: >
                {% set n = now() + timedelta(hours=correction) %}
                {% set awake_time = today_at(states('input_datetime.pepijn_time_awake')) %}
                {% set awake_time = awake_time + timedelta(days=1) if n > awake_time else awake_time %}
                {% set read_time = awake_time - timedelta(minutes=states('input_number.leestijd_pepijn') | int) %}
                {% set qh = ((read_time - n).total_seconds() / 60 / 15) | round(0, 'ceil') %}
                {% set progress = [100 - int((100/24 * qh)), 0] | max if n < read_time or n > today_at('19:00') else 100 %}
                {% if read_time < n < awake_time %}
                  {% set icon = 'book' %}
                {% else %}
                  {% set icon = 'bed-up' if is_state('sensor.house_mode', 'Slapen') else 'bed-down' %}
                {% endif %}
                {{
                  dict(
                        icon = icon,
                        text = n.strftime('%-I:%M'),
                        color = [160,0,0],
                        progress = progress,
                        progressC = [0,0,0],
                        progressBC = [160,0,0]
                      )
                }}
        else:
          - action: mqtt.publish
            data:
              qos: 0
              retain: false
              topic: awtrix_pepijn/custom/sleep_clock
              payload: >
                {{
                  dict(
                        icon = states('weather.combined'),
                        text = (now() + timedelta(hours=correction)).strftime('%-I:%M')
                      )
                }}
          - if: "{{ not is_state('select.awtrix_pepijn_brightness_mode', 'Auto') }}"
            then:
              - action: select.select_option
                data:
                  option: Auto
                target:
                  entity_id: select.awtrix_pepijn_brightness_mode
      - if: "{{ not is_state('sensor.awtrix_pepijn_current_app', 'sleep_clock') }}"
        then:
          - action: mqtt.publish
            data:
              qos: 0
              retain: false
              topic: awtrix_pepijn/switch
              payload: "{{ dict(name = 'sleep_clock') }}"

  # Floris' Ulanzi display automations
  - id: 8c6c0182-b227-47b8-a53b-c88075761b1a
    alias: "Awtrix button Floris"
    triggers:
      - trigger: event
        event_type: awtrix_button_event
        event_data:
          area: slaapkamer_floris
        variables:
          event: "{{ trigger.event.data.click }}"
          button: "{{ trigger.event.data.button }}"
    actions:
      - alias: "Which click type"
        choose:
          - conditions: "{{ event == 'single' }}"
            sequence:
              - action: light.toggle
                target:
                  entity_id: >
                    {%
                      set button_map = 
                        {
                          'left': 'light.bedlamp_floris',
                          'select': 'light.planeet',
                          'right': 'light.floris_leeslamp'
                        }
                    %}
                    {{ button_map[button] }}
          - conditions: "{{ event == 'hold' }}"
            sequence:
              - alias: "Light off"
                action: light.turn_off
                target:
                  entity_id: >
                    {{
                      area_entities('slaapkamer_floris')
                        | select('in', label_entities('off_long_press'))
                        | list
                    }}
          - conditions: "{{ event == 'double' }}"
            sequence: []
          - conditions: "{{ event == 'release' }}"
            sequence: []

  - id: 0b959006-4674-4343-b316-ebf1e124f826
    alias: "Update ulanzi Floris"
    mode: parallel
    triggers:
      - trigger: time_pattern
        seconds: "0"
      - trigger: state
        entity_id: binary_sensor.floris_sleeping
        from:
          - "on"
          - "off"
        to:
          - "on"
          - "off"
      - trigger: state
        entity_id: light.awtrix_floris_matrix
        from:
          - "unavailable"
      - trigger: state
        entity_id:
          - weather.combined
          - input_number.correction_clock_floris
        to: ~
    variables:
      correction: "{{ states('input_number.correction_clock_floris') | float(0) }}"
    actions:
      - if: "{{ is_state('binary_sensor.floris_sleeping', 'on') }}"
        then:
          - if: "{{ not is_state('select.awtrix_floris_brightness_mode', 'Manual') }}"
            then:
              - action: select.select_option
                data:
                  option: Manual
                target:
                  entity_id: select.awtrix_floris_brightness_mode
          - if: "{{ not is_state_attr('light.awtrix_floris_matrix', 'brightness', 2) }}"
            then:
              - action: light.turn_on
                target:
                  entity_id: light.awtrix_floris_matrix
                data:
                  brightness: 2
          - action: mqtt.publish
            data:
              qos: 0
              retain: false
              topic: awtrix_floris/custom/sleep_clock
              payload: >
                {% set n = now() + timedelta(hours=correction) %}
                {% set awake_time = today_at(states('input_datetime.floris_time_awake')) %}
                {% set awake_time = awake_time + timedelta(days=1) if n > awake_time else awake_time %}
                {% set qh = ((awake_time - n).total_seconds() / 60 / 15) | round(0, 'ceil') %}
                {% set progress = [100 - int((100/24 * qh)), 0] | max if n < awake_time or n > today_at('19:00') else 100 %}
                {% set icon = 'moon-up' if is_state('sensor.house_mode', 'Slapen') else 'moon-down' %}
                {{
                  dict(
                        icon = icon,
                        text = n.strftime('%-I:%M'),
                        color = [160,0,0],
                        progress = progress,
                        progressC = [0,0,0],
                        progressBC = [160,0,0]
                      )
                }}
        else:
          - action: mqtt.publish
            data:
              qos: 0
              retain: false
              topic: awtrix_floris/custom/sleep_clock
              payload: >
                {{
                  dict(
                        icon = states('weather.combined'),
                        text = (now() + timedelta(hours=correction)).strftime('%-I:%M')
                      )
                }}
          - if: "{{ not is_state('select.awtrix_floris_brightness_mode', 'Auto') }}"
            then:
              - action: select.select_option
                data:
                  option: Auto
                target:
                  entity_id: select.awtrix_floris_brightness_mode
      - if: "{{ not is_state('sensor.awtrix_floris_current_app', 'sleep_clock') }}"
        then:
          - action: mqtt.publish
            data:
              qos: 0
              retain: false
              topic: awtrix_floris/switch
              payload: "{{ dict(name = 'sleep_clock') }}"