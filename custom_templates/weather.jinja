{%- set _ns = namespace() -%}

{# all weather entities #}
    {%- set _entities = states.weather
                            | rejectattr('state', 'in', [ 'unavailable', 'unknown'])
                            | map(attribute='entity_id')
                            | reject('in', integration_entities('template'))
                            | list
    -%}

{# entities withour forecast #}
    {%- set _no_forecast = expand(_entities)
                            | rejectattr('attributes.forecast', 'defined')
                            | map(attribute='entity_id')
                            | list
    -%}

{# entities with daily forecast#}
    {%- for w in expand(_entities)
                    | rejectattr('entity_id', 'in', _no_forecast)
    -%}
        {%- set f0 = as_datetime(w.attributes.forecast[0].datetime) -%}
        {%- set f1 = as_datetime(w.attributes.forecast[1].datetime) -%}
        {%- if f1 - f0 == timedelta(days=1) -%}
            {%- set _ns.daily = _ns.daily | default([]) + [ w.entity_id ] -%}
        {%- endif -%}
    {%- endfor -%}
    {%- set _daily = _ns.daily -%}

{# entities with hourly forecast#}
    {%- set _hourly = _entities | reject('in', _daily + _no_forecast) | list -%}

{# create dict to be able to select/reject the entities #}
    {%- set _type_lists = dict(hourly=_hourly, daily=_daily) -%}

{# macro for condition #}
    {%- macro weather_condition(entity) -%}
        {%- set reject_type = 'daily' if 'hourly' in entity else 'hourly' -%}
        {%- set v = expand(_entities)
            | rejectattr('entity_id', 'in', _type_lists[reject_type])
            | map(attribute='state')
            | list
        -%}
        {%- set _ns.most_common = {'item':none,'count':none} -%}
        {%- for item in v | unique -%}
        {%- set cnt = v | select('eq', item) | list | length -%}
        {%- if loop.first or cnt > _ns.most_common.count -%}
            {%- set _ns.most_common = {'item':item,'count':cnt} -%}
        {%- endif -%}
        {%- endfor -%}
        {{- _ns.most_common.item -}}
    {%- endmacro -%}

{# macro for attributes #}
    {%- macro weather_attr(attr, entity) -%}
        {%- set reject_type = 'daily' if 'hourly' in entity else 'hourly' -%}
        {%- set v = expand(_entities)
            | rejectattr('entity_id', 'in', _type_lists[reject_type])
            | selectattr('attributes.'~attr, 'defined')
            | map(attribute='attributes.'~attr)
            | select('is_number')
            | list
        -%}
        {{- v | average | round(1) if v else none -}}
    {%- endmacro -%}

{# macro for attribution #}
{%- macro weather_attribution(entity) -%}
    {%- set reject_type = 'daily' if 'hourly' in entity else 'hourly' -%}
    {%- set entities = _entities
                        | reject('in', _type_lists[reject_type])
                        | list
    -%}
    {%- if entities -%}
    Entities used: {{- (entities[:-1] | join(', ') ~ ' and ' ~ entities[-1]) if entities | count > 1 else entities[0] -}}
    {%- endif -%}
{%- endmacro -%}

{# macro for forecasts #}
{%- macro weather_forecast(entity) -%}
    {# determine type based on entity #}
        {%- set type = 'daily' if 'daily' in entity else 'hourly' -%}
    {# determine weather entities belonging to type #}
        {%- set entities = _type_lists[type] -%}
    {# create list of forecasts of the weather entities #}
        {%- set forecasts = expand(entities)
                                | selectattr('attributes.forecast', 'defined')
                                | map(attribute='attributes.forecast')
                                | sum(start=[])
        -%}
    {# determine unique datetimes used in the forecasts #}
        {%- set datetimes = forecasts | map(attribute='datetime') | select() | unique | list -%}
        {%- for d in datetimes -%}
            {%- set dt = as_local(as_datetime(d)) -%}
            {%- set dt = dt.replace(hour=0) if type == 'daily' else dt -%}
            {%- set _ns.d = _ns.d | default([]) + [dt.isoformat() ] -%}
        {%- endfor -%}
        {%- set datetimes = _ns.d | unique | sort -%}
    {# create list of keys used in the forecasts #}
        {%- for f in forecasts -%}
            {%- set _ns.keys = _ns.keys | default([]) + f.keys() | list -%}
        {%- endfor -%}
        {%- set keys = _ns.keys | unique | list -%}
    {# create overview of forecasts #}
        {%- for d in datetimes -%}
            {# select forecasts for this datetime #}
            {%- for f in forecasts -%}
                {%- if (
                        as_datetime(d) == as_datetime(f.datetime)
                        if type == 'hourly'
                        else as_local(as_datetime(d)).date() == as_local(as_datetime(f.datetime)).date()
                        )
                -%}
                    {%- set _ns.f = _ns.f | default([]) + [f] -%}
                {%- endif -%}
            {%- endfor -%}
            {# combine data from forecasts #}
            {%- set _ns.f_combine = dict(datetime=d) -%}
            {%- for k in keys -%}
                {# find most common condition in forecasts #}
                {%- if k == 'condition' -%}
                    {%- set c_all = _ns.f | selectattr('condition', 'defined') | map(attribute='condition') | list -%}
                    {%- for item in c_all | unique -%}
                        {%- set cnt = c_all | select('eq', item) | list | count -%}
                        {%- if loop.first or cnt > _ns.most_common.count -%}
                        {%- set _ns.most_common = {'item':item,'count':cnt} -%}
                        {%- endif -%}
                    {%- endfor -%}
                    {%- set c = _ns.most_common.item -%}
                    {%- set c_all = c_all | unique | list if c_all | unique | list | count > 1 else 'nan' -%}
                    {%- set add = {k: c, 'condition_all': c_all} -%}
                    {%- set _ns.f_combine = dict(_ns.f_combine, **add) -%}
                    {# add avarages of other forecast values #}
                {%- elif k != 'datetime' -%}
                    {%- set values = _ns.f | selectattr(k, 'defined') | map(attribute=k) | list -%}
                    {%- if values | count > 0 -%}
                        {%- set add = {k: values | average | round(2)} -%}
                        {%- set _ns.f_combine = dict(_ns.f_combine, **add) -%}
                    {%- endif -%}
                {%- endif -%}
            {%- endfor -%}
        {%- set _ns.forecast = _ns.forecast | default([]) + [_ns.f_combine] -%}
        {%- endfor -%}
        {{- _ns.forecast[:datetimes|count] -}}
{%- endmacro -%}