blueprint:
  name: LLM Helper script for fetching calendar events
  description: Creates a script which will allow an LLM to fetch calendar events
  domain: script
  input:
    calendar_entities:
      name: Calendar entities
      description: Select the calendar entities to fetch the entries from
      selector:
        entity:
          multiple: true
          filter:
            domain: calendar
mode: parallel
max_exceeded: silent
fields:
  start_date:
    selector:
      datetime:
    name: Start date time
    description: Start of the period for which the calendar entries are requested. use an isoformat datetime string.
    required: true
  end_date:
    selector:
      datetime:
    name: End date time
    required: true
    description: Start of the period for which the calendar entries are requested. use an isoformat datetime string.
sequence:
  - variables:
      version: 1.1
      start: "{{ (start_date | as_datetime | as_local).isoformat() }}"
      end: >
        {% set start = as_datetime(start) %}
        {% set day = start.time() == today_at().time() %}
        {% set delta = timedelta(days=1 if day else 0, hours=0 if day else 1) %}
        {% set end = end_date | as_datetime(default=start+delta) | as_local %}
        {{ (end if end > start else start + delta).isoformat() }}
  - action: calendar.get_events
    target:
      entity_id: !input calendar_entities
    response_variable: response
    data:
      start_date_time: "{{start }}"
      end_date_time: "{{end }}"
  - variables:
      result:
        events: >-
          {{
            response.values()
              | map(attribute='events')
              | sum(start=[])
              | sort(attribute=start)
          }}
  - stop: ""
    response_variable: result
