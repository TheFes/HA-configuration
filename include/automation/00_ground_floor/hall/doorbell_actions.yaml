id: afcf34ca-7a3e-4f49-a332-9313d2a2eca5
alias: "F0H - Actions based on doorbell"
trigger:
  - platform: state
    entity_id: binary_sensor.doorbell_button
    to: "on"
mode: single
max_exceeded: silent
variables:
  blink:
    always:
      - light.slaapkamer
      - light.zolder_bol
      - light.eettafel
      - light.tv_lamp
      - light.voordeur
    only_on:
      - light.pepijn
      - light.pepijn_leeslamp
      - light.floris
  hue:
    - light.slaapkamer
    - light.zolder_bol
  esphome: >
    {{
      expand(integration_entities('esphome'))
        | selectattr('domain', 'eq', 'light')
        | map(attribute='entity_id')
        | reject('eq', 'light.tagreader_led')
        | list 
    }}
  other: >
    {{
      (blink.always + blink.only_on)
        | reject('in', hue + esphome)
        | list
    }}
condition:
  - alias: "Prevent running too much"
    condition: template
    value_template: "{{ now() - this.attributes.last_triggered > timedelta(seconds=30) }}"
action:
  - alias: "Notification for phones"
    service: notify.all_phones
    data:
      title: "ðŸ”” Ding dong!"
      message: Er staat iemand aan de deur!
      data:
        channel: Deurbel
        importance: high
        priority: high
        ttl: 0
        notification_icon: mdi:bell
  - alias: "Nvidia Shield active?"
    if:
      - not:
          - condition: state
            entity_id: media_player.nvidia_shield
            state: "off"
    then:
      - alias: "Pause Shield"
        service: media_player.media_pause
        target:
          entity_id: media_player.nvidia_shield
  - alias: "Google Home attic active or someone there"
    if:
      - or:
          - alias: "Speaker on attic playing"
            condition: state
            entity_id:
              - media_player.zolder_mini_martijn
              - media_player.zolder_mini_marleen
            match: any
            state: "playing"
          - alias: "Someone on attic"
            condition: state
            entity_id:
              - sensor.location_phone_martijn
              - sensor.location_phone_marleen
            match: any
            state: "Zolder"
    then:
      - alias: "Send TTS using Google Home Resume script"
        service: script.turn_on
        target:
          entity_id: script.google_home_resume
        data:
          variables:
            action:
              - alias: "Send TTS message"
                service: tts.google_cloud_say
                target:
                  entity_id: media_player.zolder_mini_martijn
                data:
                  message: "Ding Dong! Er staat iemand aan de deur!"
                extra:
                  volume: 0.35
  - alias: "Chime off and someone home?"
    choose:
      # Blink lights when chime is off and someone is home
      - conditions:
          - alias: "Chime off?"
            condition: state
            entity_id: switch.doorbell_chime_active
            state: "off"
          - alias: "Someone home?"
            condition: state
            entity_id: sensor.house_mode
            state: "Thuis"
        sequence:
          - alias: "Determine which lights are one and should blink"
            variables:
              lights: >
                {{ expand(blink.only_on) | selectattr('state','eq','on') | map(attribute='entity_id') | list + blink.always }}
          - alias: "Create scene with current state"
            service: scene.create
            data:
              scene_id: before
              snapshot_entities: "{{ lights }}"
          - alias: "Hue lights to blink?"
            if: "{{ lights | select('in', hue) | list | count > 0 }}"
            then:
              - alias: "Blink lights (hue_lights)"
                service: light.turn_on
                target:
                  entity_id: "{{ lights | select('in', hue) | list }}"
                data:
                  flash: long
          - alias: "ESPHome lights to blink?"
            if: "{{ lights | select('in', esphome) | list | count > 0 }}"
            then:
              - alias: "Blink lights (ESPHome)"
                service: light.turn_on
                target:
                  entity_id: "{{ lights | select('in', esphome) | list }}"
                data:
                  effect: "Fast Pulse"
          - alias: "Others lights to blink?"
            if: "{{ lights | select('in', other) | list | count > 0 }}"
            then:
              - alias: "Blink other lights using repeat loop"
                repeat:
                  count: 10
                  sequence:
                    - alias: "Toggle other lights"
                      service: light.toggle
                      data:
                        entity_id: "{{ lights | select('in', other) | list }}"
                    - alias: "Short delay between toggle"
                      delay: 0.5
          - alias: "Restore state"
            service: scene.turn_on
            target:
              entity_id: scene.before
      # Blink front door light when nobody is home
      - conditions:
          - alias: "Chime not active"
            condition: state
            entity_id: switch.doorbell_chime_active
            state: "off"
          - alias: "Nobobdy home?"
            condition: state
            entity_id: sensor.house_mode
            state: "Afwezig"
        sequence:
          - alias: "Create scene with current state"
            service: scene.create
            data:
              scene_id: before
              snapshot_entities: light.voordeur
          - alias: "Blink loop"
            repeat:
              count: 10
              sequence:
                - alias: "Blink"
                  service: light.toggle
                  data:
                    entity_id: light.voordeur
                - alias: "Short delay between toggle"
                  delay: 0.5
          - alias: "Restore scene"
            service: scene.turn_on
            target:
              entity_id: scene.before
