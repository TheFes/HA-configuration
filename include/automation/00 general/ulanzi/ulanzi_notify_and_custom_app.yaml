id: 10d5d325-1ed3-47a8-9352-b1b1d121802e
alias: "00 - Ulanzi notificatons and custom apps"
mode: parallel
trigger:
  # apps
  - platform: state
    entity_id: weather.combined_hourly
    to: ~
    variables: &weather
      app: weather
      text: "{{ state_attr('weather.combined_hourly', 'temperature') }} Â°C"
      icon: "{{ states('weather.combined_hourly') }}"
      update: "{{ state_attr('weather.combined_hourly', 'temperature') is not none and 'weather.combined_hourly' | has_value }}"
  - platform: state
    entity_id: weather.combined_hourly
    attribute: temperature
    variables: *weather
  # notifications
  - platform: state
    entity_id: sensor.pixel_7_pro_last_notification
    to: ~
    variables:
      sender_name: !secret name_gf
      update: >
        {{
          trigger.to_state.attributes['package'] is defined
          and trigger.to_state.attributes['package'] == 'com.whatsapp'
          and trigger.to_state.attributes['android.title'] == sender_name
        }}
      icon: whatsapp
      text: >
        {% if trigger.to_state.attributes['android.textLines'] is defined %}
          {{ trigger.to_state.attributes['android.textLines'] | last }}
        {% else %}
          {{ trigger.to_state.attributes['android.text'] }}
        {% endif %}
      repeat: 2
      textCase: 2
      pushIcon: 2
  - platform: state
    entity_id: binary_sensor.doorbell_button
    to: "on"
    variables:
      icon: dingdong
      text: Ding Dong!
condition:
  - "{{ update | default(true) | bool(true) }}"
action:
  - alias: "Update custom app"
    service: mqtt.publish
    data:
      qos: 0
      retain: false
      topic: awtrix_dd3300/{{ 'notify' if app | default('notify') == 'notify' else ('custom/' ~ app) }}
      payload: >
        {% set data = dict(
                          text=text,
                          repeat=repeat | default(3 if app == 'notify'),
                          rainbow=rainbow | default(),
                          icon=icon | default(),
                          pushIcon=pushIcon | default(0),
                          textCase=textCase | default(2),
                          color=color | default()
                          )
        %}
        {% set data = dict(data.items() | selectattr('1')) %}
        {{ data | to_json }}
