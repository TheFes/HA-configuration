fetch_weather_forecast_data:
  alias: Fetch Weather Forecast Data
  use_blueprint:
    path: fetch_weather_forecast_by_llm.yaml
    input:
      weather_entity: weather.combined
      calc_average: false
      time_prompt: 'This argument is mandatory and must always be provided no matter
        what!

        Provide the time on which the requested forecast starts. This time should
        be in the format HH:MM:SS in 24 hour format (for example 17:00:00). Always
        provide a time. In case a full day is requested, use 00:00:00, in case the
        current hour is requested, use the start of the hour

        Night starts at 00:00:00, morning starts at 06:00:00, afternoon starts at
        12:00:00 and evening starts at 18:00:00'
  description: Gets the weather forecast for either a part of a day, or one or more
    full days. In case the weather for the weekend is requested, this means Saturday
    and Sunday
  icon: mdi:weather-lightning-rainy
fetch_calendar_events:
  alias: Fetch Calendar Events
  use_blueprint:
    path: TheFes/3_voice_calendar_entries_full_llm.yaml
    input:
      calendar_entities:
      - calendar.m_m
      - calendar.kids
      - calendar.thefes
  description: Fetch calendar events from my calendar. In case the data for the weekend
    is requested, this means Saturday and Sunday
  icon: mdi:calendar
martijn_starts_working:
  alias: Martijn Starts Working
  sequence:
  - if:
    - condition: numeric_state
      entity_id: sensor.awtrix_martijn_illuminance
      below: 50
    then:
    - action: light.turn_on
      metadata: {}
      data:
        brightness_pct: 100
        kelvin: 6500
      target:
        entity_id: light.werkkamer_martijn_plafond_template
  - action: music_assistant.play_media
    metadata: {}
    data:
      media_type: radio
      media_id: Studio Brussel
    target:
      entity_id: media_player.martijn
  - action: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.bureau_martijn_template
  description: Actions to be performed when Martijn starts working in his office
voice_script_for_music_assistant_requests:
  use_blueprint:
    path: music-assistant/llm_voice_script.yaml
    input:
      media_player_prompt: Only use in case the request specifically mentions a media
        player to play the music on. This has to be a media player provided by the
        Music Assistant integration
      actions:
      - alias: Define variables used to send notification to the right display
        variables:
          map_to_awtrix:
          - area_name: Werkkamer Martijn
            topic: awtrix_martijn/notify
          - area_name: Pepijn
            topic: awtrix_pepijn/notify
          - area_name: Floris
            topic: awtrix_floris/notify
          topic: '{{ map_to_awtrix | selectattr(''area_name'', ''in'', area | default([],
            true) | map(''area_name'') | list) | map(attribute=''topic'') | list }}'
      - alias: Show on Ulanzi display in case there is one in the room
        repeat:
          for_each: '{{ topic }}'
          sequence:
          - alias: Send notification
            action: mqtt.publish
            data:
              qos: 0
              retain: false
              topic: '{{ repeat.item }}'
              payload: '{{ dict(text = media_description, icon = ''musicvisualisation'',)
                | to_json }}'
      conditions:
      - condition: state
        entity_id: input_boolean.test
        state: 'on'
  alias: Voice - Script for Music Assistant requests
  description: 'This script is used to play music based on a voice request. The tool
    takes the following arguments: media_type, artist, album, media_id, radio_mode,
    area. media_id, media_type are always required and must always be supplied as
    arguments to this tool. An area or Music Assistant media player can optionally
    be provided in the voice request as well. Use the parameters as described in the
    description of each parameter. Use this tool whenever the user requests to play
    music.'
  icon: mdi:account-music
current_device_state:
  sequence:
  - variables:
      mapping:
        dishwasher:
          currently_active: '{{ iif(states(''binary_sensor.dishwasher_active'') |
            bool(false), ''Yes'', ''No'') }}'
          current_program: '{%- set prog = states(''input_select.dishwasher_program'')
            %} {%- set prog_extra = states(''input_select.dishwasher_program_extra'')
            %} {%- set running = states(''binary_sensor.dishwasher_active'') | bool
            %} {{ [prog, prog_extra] | select() | join('' '') if running else ''Inactive''
            }}

            '
          ready_at: '{{ as_datetime(states(''sensor.dishwasher_end_time'')).replace(second=0,
            microsecond=0) if is_state(''binary_sensor.dishwasher_active'', ''on'')
            else ''Inactive'' }}

            '
          minutes_left: '{{ [(as_datetime(states(''sensor.dishwasher_end_time''))
            - now()).total_seconds() // 60, 0] | max }}

            '
        washing_machine:
          currently_active: '{{ iif(states(''sensor.wasmachine'') | bool(false),''Yes'',
            ''No'') }}'
          current_program: '{%- set prog = states(''sensor.wasmachine_current_course'')
            %} {%- set error = ''Error'' if is_state(''binary_sensor.wasmachine_error_state'',
            ''on'') %} {%- set running = states(''sensor.wasmachine'') | bool %} {{
            error or prog if running else ''Inactive'' }}

            '
          ready_at: '{{ now().replace(second=0, microsecond=0) + as_timedelta(states(''sensor.wasmachine_remain_time''))
            if  is_state(''sensor.wasmachine'', ''on'') else ''Inactive'' }}

            '
          minutes_left: '{{ (as_timedelta(states(''sensor.wasmachine_remain_time'')).total_seconds()
            // 60) | int }}

            '
      response: '{{ mapping[device] }}'
  - stop: ''
    response_variable: response
  fields:
    device:
      selector:
        select:
          options:
          - dishwasher
          - washing_machine
      name: Device
      description: Select from which device the details on the current state are requested.
      required: true
  alias: Current device state
  description: Script to request the current state of a device in the house. The information
    is only available for the devices in the "device" option. Convert the time in
    minutes to hours and minutes in case it is more than 60 minutes.
