# =============================================================================
# PACKAGE: Dynamic Variables System
# PURPOSE: Event-driven variable storage and management system
# DEPENDENCIES: Custom events (set_variable, remove_variable, clear_variables)
# LAST UPDATED: 2024-06-26
# =============================================================================

# OVERVIEW:
# This package provides a dynamic variable storage system using Home Assistant
# events and template sensors. It allows setting, removing, and clearing variables
# through events, with optional timestamping and logging capabilities.

# ENTITIES CREATED:
# - sensor.variables - Central variable storage sensor with event-driven updates

# EXTERNAL DEPENDENCIES:
# - Service: logbook.log - For optional event logging
# - Events: set_variable, remove_variable, clear_variables - Custom automation events

# VARIABLE OPERATIONS:
# Set Variable:
#   event_type: set_variable
#   data:
#     key: "variable_name"
#     value: "variable_value"
#     set_timestamp: true/false (optional)
#     log: true/false (optional)
#
# Remove Variable:
#   event_type: remove_variable
#   data:
#     key: "variable_name"
#     log: true/false (optional)
#
# Clear All Variables:
#   event_type: clear_variables
#   data:
#     log: true/false (optional)

# FEATURES:
# - Dynamic variable storage without input helpers
# - Optional timestamping for variable values
# - Optional logbook logging of variable operations
# - Event-driven updates for real-time changes
# - Persistent state across Home Assistant restarts

# CONFIGURATION:
# - default_timestamp: Global timestamp setting (default: false)
# - log_events: Global logging setting (default: false)

# USAGE EXAMPLE:
# action: event.fire
# event_type: set_variable
# event_data:
#   key: "last_motion_sensor"
#   value: "kitchen"
#   set_timestamp: true
#   log: true

template:
  # ---------------------------------------------------------------------------
  # COMPONENT: Dynamic Variable Storage System
  # PURPOSE: Event-driven variable management with optional timestamping and logging
  # DEPENDENCIES: Custom events for variable operations
  # ---------------------------------------------------------------------------
  - # trigger based template sensor to store variables
  # for more info, see https://community.home-assistant.io/t/wth-cant-input-helpers-be-read-only-in-ui/467562/32
  
  - triggers:
      - platform: event
        event_type: set_variable
      - platform: event
        event_type: remove_variable
      - platform: event
        event_type: clear_variables
    conditions:
      - condition: template
        value_template: >
          {{
              (
                trigger.event.event_type == 'set_variable'
                and trigger.event.data is defined
                and trigger.event.data.key is defined
                and trigger.event.data.value is defined
              )
              or
              (
                trigger.event.event_type == 'remove_variable'
                and trigger.event.data is defined
                and trigger.event.data.key is defined
              )
              or 
              trigger.event.event_type == 'clear_variables'
          }}
    actions:
      - if: "{{ trigger.event.data.get('log', state_attr('sensor.variables', 'log_events')) }}"
        then:
          - service: logbook.log
            data:
              name: "{{ trigger.event.event_type }}:"
              message: >
                {{ trigger.event.data.key | default('All variables removed') }}
                {%- if trigger.event.event_type == 'set_variable' -%}
                  : {{ trigger.event.data.value }}.
                {%- endif -%}
    sensor:
      - unique_id: 4a4c8e53-9e68-4198-9cc5-b336e228ea4d
        name: Variables
        state: "{{ trigger.event.time_fired }}"
        device_class: timestamp
        attributes:
          default_timestamp: false
          log_events: false
          variables: >
            {% set others = dict(this.attributes.get('variables', {}).items() | rejectattr('0', 'eq', trigger.event.data.key)) %}
            {% if trigger.event.event_type == 'set_variable'
                and trigger.event.data.get('set_timestamp', this.attributes.get('default_timestamp', false))
            %}
              {% set value  = trigger.event.data.value %}
              {% set value = value.isoformat() if value is datetime else value %}
              {% set new = {trigger.event.data.key: {'value': value, 'timestamp': now().isoformat()}} %}
              {{ dict(others, **new) }}
            {% elif trigger.event.event_type == 'set_variable' %}
              {% set new = {trigger.event.data.key: trigger.event.data.value} %}
              {{ dict(others, **new) }}
            {% elif trigger.event.event_type == 'remove_variable' %}
              {{ others }}
            {% elif trigger.event.event_type == 'clear_variables' %}
              {}
            {% endif %}
