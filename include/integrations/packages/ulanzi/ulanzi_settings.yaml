input_select:
  ulanzi_setting:
    name: Ulanzi Setting
    options:
      - Select Setting
      - App duration
      - Transition time
      - Text Color
      - FPS
      - Matrix Brightness
      - Auto Brightness
      - Automatic Transition
      - Color Correction
      - Color Temperature
      - Gamma
      - Time Format
      - Date Format
    initial: Select Setting
    icon: mdi:clock-digital

template:
  - trigger:
      - platform: state
        entity_id:
          - input_select.ulanzi_setting
        to: ~
        id: state
      - platform: event
        event_type: ulanzi_setting
        id: attr
    sensor:
      - unique_id: f1ede1b0-eda8-4a59-89cb-f0eda51207eb
        name: Ulanzi Setting
        state: >
          {% set mapping =
            {
              'Select Setting': 'none',
              'App duration': 'number',
              'Transition time': 'number',
              'Text Color': 'text',
              'FPS': 'number',
              'Matrix Brightness': 'number',
              'Auto Brightness': 'boolean',
              'Automatic Transition': 'boolean',
              'Color Correction': 'text',
              'Color Temperature': 'text',
              'Gamma': 'number',
              'Time Format': 'select',
              'Date Format': 'select'
            }
          %}
          {{ mapping[trigger.to_state.state] | default('none') if trigger.id == 'state' else this.state }}
        attributes:
          last_selection: >
            {% set current = this.attributes.get('last_selection', {}) %}
            {% if trigger.id == 'attr'%}
              {% set new = {trigger.event.data.key: trigger.event.data.setting} %}
              {{ dict(current, **new) }}
            {% else %}
              {{ current }}
            {% endif %}
  - trigger:
      - platform: state
        entity_id: input_select.ulanzi_setting
        to:
          - Time Format
          - Date Format
    select:
      - unique_id: 242e2bf3-8970-4711-98aa-83df671be721
        name: >
          {% if not trigger.to_state.state in ['Time Format', 'Date Format'] %}
            Ulanzi Setting
          {% else %}
            {{ trigger.to_state.state }}
          {% endif %}
        optimistic: true
        state: >
          {{ (state_attr('sensor.ulanzi_setting', 'last_selection') | default({}, true)).get(trigger.to_state.state, 'Select Setting') }}
        options: >
          {% if 'Time' in trigger.to_state.state %}
            {{
              [
                'Select Setting',
                '%H:%M:%S - 13:30:45',
                '%l:%M:%S - 1:30:45',
                '%H:%M - 13:30',
                '%H %M - 13.30 with blinking colon',
                '%l:%M - 1:30',
                '%l %M - 1:30 with blinking colon',
                '%l:%M %p - 1:30 PM',
                '%l %M %p - 1:30 PM with blinking colon'
              ]
            }}
          {% elif 'Date' in trigger.to_state.state %}
            {{
              [
                'Select Setting',
                '%d.%m.%y - 01.04.22',
                '%d.%m - 01.04',
                '%y-%m-%d - 22-04-01',
                '%m-%d - 04-01',
                '%m/%d/%y - 04/01/22',
                '%m/%d - 04/01',
                '%d/%m/%y - 01/04/22',
                '%d/%m - 01/04',
                '%m-%d-%y - 04-01-22'
              ]
            }}
          {% else %}
            {{
              [
                'Select setting'
              ]
            }}
          {% endif %}
        select_option:
          - if: "{{ option != 'Select Setting' }}"
            then:
              - variables:
                  key: "{{ 'timeformat' if 'Time' in states.select.ulanzi_setting.name else 'dateformat' }}"
                  setting: "{{ option.split(' - ') | first }}"
              - alias: "Change setting"
                service: mqtt.publish
                data:
                  qos: 0
                  retain: false
                  topic: awtrix_dd3300/settings
                  payload: >
                    {{ { key: setting } | to_json }}
              - event: ulanzi_setting
                event_data:
                  key: "{{ states.select.ulanzi_setting.name }}"
                  setting: "{{ option }}"
  - trigger:
      - platform: state
        entity_id: input_select.ulanzi_setting
        to:
          [
            "App duration",
            "Transition time",
            "FPS",
            "Matrix Brightness",
            "Gamma",
          ]
    number:
      - unique_id: 9d4bfc9c-5eaa-407e-bd40-38c4f77ac6d0
        name: >
          {% if trigger is not defined or not trigger.to_state.state in ['App duration', 'Transition time', 'FPS', 'Matrix Brightness', 'Gamma'] %}
            Ulanzi Setting
          {% else %}
            {{ trigger.to_state.state }}
          {% endif %}
        optimistic: true
        state: >
          {% set defaults = 
            {
              'App duration': 7000,
              'Transition time': 500,
              'FPS': 23,
              'Matrix Brightness': 255,
              'Gamma': 0
            }
          %}
          {{ (state_attr('sensor.ulanzi_setting', 'last_selection') | default({}, true)).get(trigger.to_state.state, defaults[trigger.to_state.state]) }}
        step: >
          {% set defaults = 
            {
              'App duration': 100,
              'Transition time': 50,
              'FPS': 1,
              'Matrix Brightness': 5,
              'Gamma': 1
            }
          %}
          {{ (state_attr('sensor.ulanzi_setting', 'last_selection') | default({}, true)).get(trigger.to_state.state, defaults[trigger.to_state.state]) }}
        min: >
          {% set defaults = 
            {
              'App duration': 0,
              'Transition time': 0,
              'FPS': 0,
              'Matrix Brightness': 0,
              'Gamma': 0
            }
          %}
          {{ defaults[trigger.to_state.state] }}
        max: >
          {% set defaults = 
            {
              'App duration': 50000,
              'Transition time': 2000,
              'FPS': 100,
              'Matrix Brightness': 255,
              'Gamma': 20
            }
          %}
          {{ defaults[trigger.to_state.state] }}
        set_value:
          - if: "{{ option != 'Select Setting' }}"
            then:
              - variables:
                  key_mapping: >
                    {{
                      {
                        'App duration': 'apptime',
                        'Transition time': 'transition',
                        'FPS': 'fps',
                        'Matrix Brightness': 'brightness',
                        'Gamma': 'gamma'
                      }
                    }}
                  key: "{{ key_mapping[states.number.ulanzi_setting.name] }}"
                  setting: "{{ value }}"
              - alias: "Change setting"
                service: mqtt.publish
                data:
                  qos: 0
                  retain: false
                  topic: awtrix_dd3300/settings
                  payload: >
                    {{ { key: setting } | to_json }}
              - event: ulanzi_setting
                event_data:
                  key: "{{ states.number.ulanzi_setting.name }}"
                  setting: "{{ value }}"
