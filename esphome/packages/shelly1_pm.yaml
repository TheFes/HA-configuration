select:
  - platform: template
    name: "Button Type"
    id: button_type_select
    entity_category: config
    options:
      - Detached
      - Momentary
      - Toggle
    optimistic: true
    restore_value: true
    on_value:
      then:
        - text_sensor.template.publish:
            id: button_type_state
            state: !lambda "return id(button_type_select).state;"

switch:
  - platform: gpio
    name: ${device_name}
    pin: GPIO15
    id: shelly_relay

sensor:
  - platform: hlw8012
    cf_pin: GPIO05
    cf1_pin: GPIO13 # not used because it is not available on the 1PM but it is needed to compile
    sel_pin: GPIO14 # not used because it is not available on the 1PM but it is needed to compile
    power:
      name: "${device_name} power"
      unit_of_measurement: W
      id: "shelly1pm_power"
      device_class: power
      state_class: measurement
      accuracy_decimals: 0
      filters:
        # Map from sensor -> measured value
        - calibrate_linear:
            - 0.0 -> 1.0
            - 110.33186 -> 20.62
            - 131.01909 -> 24.32
            - 341.33920 -> 62.08
            - 5561.41553 -> 1000.0
            - 2975.51221 -> 535.7
            - 9612.66309 -> 1720.0
            - 14891.35352 -> 2679.0
        # Make everything below 2W appear as just 0W.
        - lambda: if (x < 2) return 0; else return x;
    update_interval: 10s

  - platform: total_daily_energy
    name: "${device_name} daily energy"
    power_id: "shelly1pm_power"
    device_class: energy
    state_class: total_increasing
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh

  - platform: ntc
    sensor: temp_resistance_reading
    name: "${device_name} temperature"
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1
    device_class: temperature
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      - above: ${max_temp}
        then:
          - homeassistant.event:
              event: esphome.overheat
              data:
                title: "${device_name} has overheated."
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    id: temp_analog_reading
    pin: A0

output:
  - platform: esp8266_pwm
    id: state_led
    pin:
      number: GPIO00
      inverted: true

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO4
      #mode: INPUT_PULLUP
      #inverted: True
    filters:
      - delayed_on_off: 50ms # small delay to prevent debouncing
    name: ${device_name} button
    id: button_press
    internal: true
    on_state:
      - if:
          condition:
            - text_sensor.state:
                id: button_type_state
                state: "Toggle"
          then:
            - switch.toggle: shelly_relay
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - if:
              condition:
                or:
                  - text_sensor.state:
                      id: button_type_state
                      state: "Detached"
                  - text_sensor.state:
                      id: button_type_state
                      state: "Momentary"
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      device: ${device_name}
                      click_type: triple
                - switch.toggle: shelly_relay
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - if:
              condition:
                - api.connected:
                - switch.is_on: shelly_relay
                - or:
                    - text_sensor.state:
                        id: button_type_state
                        state: "Detached"
                    - text_sensor.state:
                        id: button_type_state
                        state: "Momentary"
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      device: ${device_name}
                      click_type: double
              else:
                - switch.toggle: shelly_relay
      - timing:
          - ON for at least 1.5s
        then:
          - if:
              condition:
                - api.connected:
                - switch.is_on: shelly_relay
                - or:
                    - text_sensor.state:
                        id: button_type_state
                        state: "Detached"
                    - text_sensor.state:
                        id: button_type_state
                        state: "Momentary"
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      device: ${device_name}
                      click_type: long
              else:
                - switch.toggle: shelly_relay
      - timing:
          - ON for at most 1s
          - OFF for at least 0.25s
        then:
          - if:
              condition:
                - api.connected:
                - switch.is_on: shelly_relay
                - text_sensor.state:
                    id: button_type_state
                    state: "Detached"
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      device: ${device_name}
                      click_type: short
              else:
                - if:
                    condition:
                      - text_sensor.state:
                          id: button_type_state
                          state: "Momentary"
                    then:
                      - switch.toggle: shelly_relay
    on_release:
      then:
        - homeassistant.event:
            event: esphome.button_pressed
            data:
              device: ${device_name}
              click_type: release

text_sensor:
  - platform: template
    internal: true
    id: button_type_state
    lambda: |-
      return id(button_type_select).state;
