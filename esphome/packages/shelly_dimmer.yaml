# based on the config of pimw from community post https://community.home-assistant.io/t/shelly-2-dimmer/232324/18
uart:
  tx_pin: 1
  rx_pin: 3
  baud_rate: 115200

light:
  - platform: shelly_dimmer
    name: ""
    id: dimmer
    leading_edge: ${leading_edge}
    min_brightness: ${min_brightness}
    max_brightness: ${max_brightness}
    restore_mode: ${restore_mode}
    default_transition_length: 1s
    gamma_correct: ${gamma_correct}
    firmware:
      version: "51.6"
      update: true

select:
  - platform: template
    id: dim_action_select
    name: Dim Action
    options:
      - "up"
      - "down"
    optimistic: true
    restore_value: true
    on_value:
      then:
        - text_sensor.template.publish:
            id: dim_action
            state: !lambda "return id(dim_action).state;"

sensor:
  - platform: ntc
    sensor: temp_resistance_reading
    name: Temperature
    id: temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value:
      then:
        - if:
            condition:
              - sensor.in_range:
                  id: temperature
                  above: ${max_temp}
              - light.is_on: dimmer
            then:
              - light.turn_off:
                  id: dimmer
              - logger.log: "Switch turned off because temperature exceeded ${max_temp}°C"
              - homeassistant.service:
                  service: persistent_notification.create
                  data:
                    title: Message from ${name}
                  data_template:
                    message: Switch turned off because temperature exceeded ${max_temp}°C
    on_value_range:
      - above: ${max_temp}
        then:
          - logger.log: "Temperature exceeded ${max_temp}°C"
          - homeassistant.service:
              service: persistent_notification.create
              data:
                title: Message from ${name}
              data_template:
                message: Temperature exceeded ${max_temp}°C
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    id: temp_analog_reading
    pin: A0

text_sensor:
  - platform: template
    id: dim_action
    lambda: |-
      return id(dim_action_select).state;

script:
  - id: script_dim_down_timer
    mode: restart
    then:
      - logger.log: "Dim-down timer script started"
      - delay: ${dim_lenght}
      - logger.log: "Dim-down timer script finished"
  - id: script_dim_up_timer
    mode: restart
    then:
      - logger.log: "Dim-up timer script started"
      - delay: ${dim_lenght}
      - logger.log: "Dim-up timer script finished"
  - id: script_dim_down
    mode: single
    then:
      - logger.log: "Dim-down script started"
      - while:
          condition:
            and:
              - script.is_running: script_dim_down_timer
              - light.is_on: dimmer
              - lambda: "return(id(dimmer).remote_values.get_brightness() >= 0.01);"
          then:
            - light.dim_relative:
                id: dimmer
                relative_brightness: -0.5%
                transition_length: 0.01s
            - delay: 0.01s
      - logger.log: "Dim-down script finished"
  - id: script_dim_up
    mode: single
    then:
      - logger.log: "Dim-up script started"
      - while:
          condition:
            and:
              - script.is_running: script_dim_up_timer
              - light.is_on: dimmer
              - lambda: "return(id(dimmer).remote_values.get_brightness() <= 0.999);"
          then:
            - light.dim_relative:
                id: dimmer
                relative_brightness: 0.5%
                transition_length: 0.01s
            - delay: 0.01s
      - logger.log: "Dim-up script finished"

binary_sensor:
  - platform: gpio
    name: Dim Down
    id: sensor_button_1
    pin:
      number: GPIO14
      mode: INPUT
    internal: false
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - if:
              condition:
                - api.connected:
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      device: ${name}
                      click_type: restart
                      button: "1"
          - button.press: restart_button
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - if:
              condition:
                - api.connected:
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      device: ${name}
                      click_type: double
                      button: "1"
              else:
                - light.turn_on:
                    id: dimmer
                    brightness: 100%
      - timing:
          - ON for at most 300ms
        then:
          - if:
              condition:
                - api.connected:
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      device: ${name}
                      click_type: short
                      button: "1"
              else:
                - light.toggle:
                    id: dimmer
      - timing:
          - ON for at least 300ms
        then:
          - if:
              condition:
                - api.connected:
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      device: ${name}
                      click_type: long
                      button: "1"
              else:
                - if:
                    condition:
                      - text_sensor.state:
                          id: dim_action
                          state: "up"
                    then:
                      - script.execute: script_dim_up_timer
                      - script.execute: script_dim_up
                      - select.set:
                          id: dim_action_select
                          option: "down"
                    else:
                      - script.execute: script_dim_down_timer
                      - script.execute: script_dim_down
                      - select.set:
                          id: dim_action_select
                          option: "up"
    on_release:
      then:
        - if:
            condition:
              - api.connected:
            then:
              - homeassistant.event:
                  event: esphome.button_pressed
                  data:
                    device: ${name}
                    click_type: release
                    button: "1"
            else:
              - if:
                  condition:
                    light.is_on:
                      id: dimmer
                  then:
                    - logger.log: "Physical dim_down release trigger"
                    - script.stop: script_dim_down_timer

button:
  - platform: template
    name: Dim Down
    on_press:
      then:
        - script.execute: script_dim_down_timer
        - script.execute: script_dim_down
  - platform: template
    name: Dim Up
    on_press:
      then:
        - script.execute: script_dim_up_timer
        - script.execute: script_dim_up
  - platform: template
    name: Dim Stop
    on_press:
      then:
        - logger.log: "Stopping timer script"
        - script.stop: script_dim_down_timer
        - script.stop: script_dim_up_timer
