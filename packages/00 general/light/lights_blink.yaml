# Script to perform blink action
script:
  # script to perform Slow Pulse and Fast Pulse effect for unsupported lights
  light_blink:
    alias: "Light blink"
    mode: parallel
    fields:
      light:
        description: "Select the light"
        name: Light
        example: light.livingroom
        required: true
        selector:
          entity:
            domain: light
            multiple: false
      toggle_entity:
        description: "Select the entity to toggle"
        name: Light
        example: switch.livingroom
        required: false
        selector:
          entity:
            multiple: false
      effect:
        description: Effect
        example: Fast Pulse
        required: true
        selector:
          select:
            options:
              - None
              - Fast Pulse
              - Slow Pulse
    sequence:
      - parallel:
          - sequence:
              - if: "{{ effect != 'None' }}"
                then:
                  - event: light_effect_blink
                    event_data:
                      light: "{{ light }}"
                      effect: "{{ effect }}"
                  - alias: "Create scene with current state"
                    service: scene.create
                    data:
                      scene_id: before_{{ light | replace('.', '_') }}
                      snapshot_entities: "{{ light }}"
                  - alias: "Blink loop"
                    repeat:
                      count: "{{ 20 if effect == 'Fast Pulse' else 10 }}"
                      sequence:
                        - variables:
                            domain: "{{ toggle_entity.split('.')[0] }}"
                        - alias: "Blink"
                          service: "{{ domain }}.toggle"
                          data:
                            entity_id: "{{ toggle_entity }}"
                        - alias: "Short delay between toggle"
                          delay: "{{ 0.5 if effect == 'Fast Pulse' else 1 }}"
                  - alias: "Restore scene"
                    service: scene.turn_on
                    target:
                      entity_id: scene.before_{{ light | replace('.', '_') }}
              - event: light_effect_blink
                event_data:
                  light: "{{ light }}"
              - stop:
          - sequence:
              - wait_template: "{{ not state_attr(light, effect) }}"
              - event: light_effect_blink
                event_data:
                  light: "{{ light }}"
              - alias: "Restore scene"
                service: scene.turn_on
                target:
                  entity_id: scene.before_{{ light | replace('.', '_') }}
              - stop:

  # script to blink lights in case of an alert (eg doorbell)
  light_blink_alert:
    alias: "Blink lights to alert"
    icon: mdi:alert
    mode: single
    max_exceeded: silent
    variables:
      blink:
        always:
          - light.eettafel_template
          - light.tv_lamp_template
          - light.hal
          - light.overloop
          - light.badkamer_zolder_template
          - light.werkkamer_marleen_template
          - light.badkamer
        only_on:
          - light.slaapkamer_plafond_template
          - light.pepijn_template
          - light.graafmachine
          - light.floris
          - light.leeslamp_floris
          - light.werkkamer_martijn_plafond_template
      hue:
        - light.floris
        - light.leeslamp_floris
    sequence:
      - alias: "Determine which lights are one and should blink"
        variables:
          lights: >
            {{ blink.only_on | select('is_state', 'on') | list + blink.always }}
          effect: >
            {{
              expand(lights)
                | rejectattr('entity_id', 'in', 'hue')
                | selectattr('attributes.effect_list', 'defined')
                | selectattr('attributes.effect_list', 'contains', 'Slow Pulse')
                | map(attribute='entity_id')
                | list
            }}
          other: "{{ lights | reject('in', hue + effect) | list}}"
      - alias: "Create scene with current state"
        service: scene.create
        data:
          scene_id: before
          snapshot_entities: "{{ lights }}"
      - alias: "Hue lights to blink?"
        if: "{{ lights | select('in', hue) | list | count > 0 }}"
        then:
          - alias: "Blink lights (hue_lights)"
            service: light.turn_on
            target:
              entity_id: "{{ lights | select('in', hue) | list }}"
            data:
              flash: long
      - alias: "Lights with pulse effecst"
        if: "{{ effect | count > 0 }}"
        then:
          - alias: "Blink lights"
            service: light.turn_on
            target:
              entity_id: "{{ effect }}"
            data:
              effect: "Slow Pulse"
      - alias: "Others lights to blink?"
        if: "{{ other | count > 0 }}"
        then:
          - repeat:
              for_each: "{{ other }}"
              sequence:
                - service: script.turn_on
                  target:
                    entity_id: script.light_blink
                  data:
                    variables:
                      light: "{{ repeat.item }}"
                      effect: "{{ effect }}"
          - alias: "Blink other lights using repeat loop"
            repeat:
              count: 10
              sequence:
                - alias: "Toggle other lights"
                  service: light.toggle
                  data:
                    entity_id: "{{ other }}"
                - alias: "Short delay between toggle"
                  delay: 0.5
      - delay:
          seconds: 10
      - alias: "Restore state"
        service: scene.turn_on
        target:
          entity_id: scene.before
      - alias: "Disable blinking"
        service: light.turn_on
        data:
          effect: "None"
        target:
          entity_id: "{{ effect | select('is_state', 'on') | list }}"

# Template sensor to store lights for which script is active
template:
  - trigger:
      - platform: event
        event_type: light_effect_blink
    sensor:
      - unique_id: 7b25c899-ec7d-48f3-b9c4-3f7fb7a08a68
        name: Blink Effect Active
        state: OK
        attributes:
          blink_active: >
            {% set current = this.attributes.get('blink_active', {}) %}
            {% set others = dict(current.items() | rejectattr('0', 'eq', trigger.event.data.light)) %}
            {% if trigger.event.data.effect is defined and trigger.event.data.light is defined %}
              {% set add = {trigger.event.data.light: trigger.event.data.effect} %}
              {{ dict(others, **add) }}
            {% elif trigger.event.data.light is defined %}
              {{ others }}
            {% else %}
              {{ current }}
            {% endif %}

# Convert switches to lights, and add blink effect
light:
  - platform: template
    lights:
      booglamp:
        unique_id: 85d30c5c-f581-40bd-a048-162d10dcfd60
        friendly_name: "Booglamp"
        icon_template: mdi:floor-lamp
        value_template: &value >
          {% set id = this.entity_id | regex_replace('light.|_template', '') %}
          {% set switch = states.switch
              | selectattr('object_id', 'search', id ~ '_relay')
              | map(attribute='entity_id')
              | list 
          %}
          {% set switch = switch | first if switch else 'none' %}
          {{
            is_state(switch, 'on')
            or is_state('switch.' ~ id, 'on')
            or this.entity_id in state_attr('sensor.blink_effect_active', 'blink_active') | default({}, true)
          }}
        availability_template: &availability >
          {% set id = this.entity_id | regex_replace('light.|_template', '') %}
          {% set switch = states.switch
              | selectattr('object_id', 'search', id ~ '_relay')
              | map(attribute='entity_id')
              | list 
          %}
          {% set switch = switch | first if switch else 'none' %}
          {{ switch | has_value or ('switch.' ~ id) | has_value }}
        turn_on: &turn_on
          - service: switch.turn_on
            target:
              entity_id: >
                {% set id = this.entity_id | regex_replace('light.|_template', '') %}
                {% set switch = states.switch
                    | selectattr('object_id', 'search', id ~ '_relay')
                    | map(attribute='entity_id')
                    | list 
                %}
                {% set switch = switch | first if switch else 'none' %}
                {{ [ switch, 'switch.' ~ id] | select('has_value') | list | first }}
        turn_off: &turn_off
          - service: switch.turn_off
            target:
              entity_id: >
                {% set id = this.entity_id | regex_replace('light.|_template', '') %}
                {% set switch = states.switch
                    | selectattr('object_id', 'search', id ~ '_relay')
                    | map(attribute='entity_id')
                    | list 
                %}
                {% set switch = switch | first if switch else 'none' %}
                {{ [ switch, 'switch.' ~ id] | select('has_value') | list | first }}
        effect_list_template: &effect_list "{{ ['Fast Pulse', 'Slow Pulse', 'None'] }}"
        effect_template: &effect "{{ state_attr('sensor.blink_effect_active', 'blink_active')[this.entity_id] | default('None') }}"
        set_effect: &set_effect
          - service: script.turn_on
            target:
              entity_id: script.light_blink
            data:
              variables:
                light: "{{ this.entity_id }}"
                toggle_entity: >
                  {% set id = this.entity_id | regex_replace('light.|_template', '') %}
                  {% set switch = states.switch
                      | selectattr('object_id', 'search', id ~ '_relay')
                      | map(attribute='entity_id')
                      | list 
                  %}
                  {% set switch = switch | first if switch else 'none' %}
                  {{ [ switch, 'switch.' ~ id] | select('has_value') | list | first }}
                effect: "{{ effect }}"

      voordeur:
        unique_id: 88a90466-f1d2-48ae-af0b-7c4494141148
        friendly_name: "Voordeur"
        icon_template: mdi:coach-lamp
        value_template: *value
        availability_template: *availability
        turn_on: *turn_on
        turn_off: *turn_off
        effect_list_template: *effect_list
        effect_template: *effect
        set_effect: *set_effect

      nijntje:
        unique_id: 18918667-0bde-4ed3-a753-9860aa9e9596
        friendly_name: "Nijntje"
        icon_template: mdi:rabbit-variant
        value_template: *value
        availability_template: *availability
        turn_on: *turn_on
        turn_off: *turn_off
        effect_list_template: *effect_list
        effect_template: *effect
        set_effect: *set_effect

      badkamerspiegel:
        unique_id: 4ba1e527-8550-4118-8e6c-e191273f100c
        friendly_name: "Badkamerspiegel"
        icon_template: mdi:mirror-rectangle
        value_template: *value
        availability_template: *availability
        turn_on: *turn_on
        turn_off: *turn_off
        effect_list_template: *effect_list
        effect_template: *effect
        set_effect: *set_effect

      technische_ruimte:
        unique_id: 167b02e7-eae5-4203-b964-a09098e0f417
        friendly_name: "Technische Ruimte"
        icon_template: "{{ 'mdi:wall-sconce-flat' if this.state == 'on' else 'mdi:wall-sconce-flat-outline' }}"
        value_template: *value
        availability_template: *availability
        turn_on: *turn_on
        turn_off: *turn_off
        effect_list_template: *effect_list
        effect_template: *effect
        set_effect: *set_effect

      badkamerspiegel_zolder:
        unique_id: f6ca2c05-ccea-478f-b4f9-e361688e5f5c
        friendly_name: "Badkamerspiegel Zolder"
        icon_template: "{{ 'mdi:wall-sconce-flat' if this.state == 'on' else 'mdi:wall-sconce-flat-outline' }}"
        value_template: *value
        availability_template: *availability
        turn_on: *turn_on
        turn_off: *turn_off
        effect_list_template: *effect_list
        effect_template: *effect
        set_effect: *set_effect
