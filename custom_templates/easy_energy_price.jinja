{%- macro easy_energy_price(sensor, hours, start, end, time_key, value_key, include_today, include_tomorrow, lowest, mode) %}
    {# Get data out of the selected entity #}
        {%- set today = state_attr(sensor, 'raw_today') %}
        {%- set tomorrow = state_attr(sensor, 'raw_tomorrow') %}
        {%- set m = mode | default('start') %}
    {# Check if data is available and mode is correct#}
        {% if not today and not tomorrow %}
            No valid data in selected sensor
        {%- elif m not in ['min', 'max', 'average', 'start', 'end', 'list'] %}
            Invalid mode selected
        {% else %}
            {# Set defaults for variables which are not provided #}
                    {%- set tk, vk = time_key | default('start'), value_key | default('value') %}
                    {%- set h = hours | default(1) | int(1) %}
                    {%- set l = lowest | default(true) | bool(true) %}
                    {%- set itd = include_today | default(true) | bool(true) %}
                    {%- set it = include_tomorrow | default(false) | bool(false) %}
                    {%- set s = today_at(start) if start is defined else today_at() -%}
                    {%- set s = s + timedelta(days=1) if not itd else s %}
                    {%- set e = (today_at(end) if end is defined else today_at() + timedelta(days=1)) + timedelta(days=1 if it else 0) %}
                    {%- set e = e + timedelta(days=1) if not itd and end is defined else e %}
                {# Check if the dateteime in the sensor is a string, and convert start and end if needed #}
                    {%- set str = today[0][tk] is string %}
                    {%- set s, e = s.isoformat() if str else s, e.isoformat() if str else e %}
                {# Perform selection based on start and end on the data #}
                    {%- set values = 
                                        ((today if itd else []) + (tomorrow if it else []))
                                            | selectattr(tk, '>=', s)
                                            | selectattr(tk, '<', e)
                                            | selectattr(vk, 'is_number')
                                            | list
                    %}
                {# Check if there is data, and find the right hour block #}
                    {%- if values %}
                    {%- set ns = namespace(average=none, start=none, min=none, max=none) %}
                    {%- for i in values[:values|length-(h-1)] %}
                        {%- set ix = loop.index0 %}
                        {%- set list = values[ix:ix+h] | map(attribute=vk) | list  %}
                        {%- set a = list | average  %}
                        {%- set b = ns.average %}
                        {%- set min = list | min  %}
                        {%- set max = list | max  %}
                        {%- if ns.average is none or ((a < b) if l else (a > b)) %}
                            {%- set ns.list = list %}
                            {%- set ns.min = min %}
                            {%- set ns.max = max %}
                            {%- set ns.average = a %}
                            {%- set ns.start = as_datetime(i[tk]) if str else i[tk] %}
                            {%- set ns.end = ns.start + timedelta(hours=h) %}
                        {%- endif %}
                    {%- endfor %}
                    {# output date based on the selected mode#}
                        {{ ns[m] | round(3) if ns[m] | is_number else ns[m] }}
                    {%- else %}
                        No data within current selection
                    {%- endif %}
        {% endif %}
{%- endmacro %}

