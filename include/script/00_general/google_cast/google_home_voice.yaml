# Script to receive a TTS on a Google Home on which you just asked a question
# for more details: https://community.home-assistant.io/t/script-to-send-tts-to-the-right-google-home-based-on-voice-commands/346885
#
google_home_voice:
  alias: "00 - Google Home Voice"
  icon: mdi:cast-audio
  mode: single
  max_exceeded: silent
  variables:
    check_for_title: "Witte ruis"
  sequence:
    - alias: "Variable for version number"
      variables:
        version: 2022.11.1
    - alias: "Are there Spotify entities?"
      if: "{{ integration_entities('spotify') | count > 0 }}"
      then:
        - alias: "Update Spotify entities"
          service: homeassistant.update_entity
          target:
            entity_id: "{{ integration_entities('spotify') }}"
    - alias: "Set variables for resume data"
      variables:
        service_calls: >
          {%- set ns = namespace(service = []) %}
          {%- for item in action %}
            {%- if item.get('service', 'uhoh') != 'uhoh' %}
              {%- set ns.service = ns.service + [ item ] %}
            {%- endif %}
          {%- endfor %}
          {{ ns.service }}
        no_service_count: >
          {{ action | reject('in', service_calls) | list | count }}
        settings: "{{ state_attr('script.google_home_resume', 'settings') | to_json }}"
        data_source: voice_script
        speaker_group_list: "{{ (settings.get('speaker_groups') or {}).keys() | list or [] }}"
        speaker_groups: "{{ settings.get('speaker_groups') or { 'no group': [ 'no members' ] } }}"
        cast_entities: "{{ integration_entities('cast') }}"
        spotify_entities: "{{ integration_entities('spotify') }}"
        mass_entities: "{{ integration_entities('mass') | select('match', '^media_player.') | list }}"
        cast_mass_playing: >
          {%- if cast_mass_playing is defined %}
            {{ cast_mass_playing }}
          {%- else %}
            {{
              expand(integration_entities('cast'))
                | selectattr('attributes.media_title', 'defined')
                | selectattr('attributes.media_title', 'search', 'Streaming from Music Assistant')
                | map(attribute='entity_id')
                | list
            }}
          {%- endif %}
        mass_playing: "{{ (cast_mass_playing | join(',') | replace('.', '.mass_')).split(',') | select() | list }}"
        primary_spotcast_check: >
          {% set accounts = (spotify_entities | join(',') | replace('media_player.spotify_', '')).split(',') %}
          {{ spotify_entities | count <= 1 or settings.get('primary_spotcast') in accounts }}
        ytube_music_entities: >
          {{ integration_entities('ytube_music_player') | select('match', '^media_player.') | list }}
        player_data: >
          {%- if player_data is undefined %}
            {# general information for all entities #}
            {%- set ns = namespace(info=[]) %}
            {%- for entity in expand(integration_entities('cast')) %}
                {%- set members = speaker_groups[entity.entity_id]
                              if speaker_groups is defined
                                and iif(speaker_groups)
                                and entity.entity_id in speaker_group_list
                              else []
                %}
                {%- set screen = entity.entity_id in settings.get('players_screen', []) %}
                {%- set type = iif(members,'group',iif(screen,'screen','no screen')) %}
                {%- set general = dict(
                                        data_source = data_source,
                                        entity_id = entity.entity_id,
                                        state = entity.state,
                                        type = type,
                                        members = members
                                        )
                %}
                {# add information for Music Assistant #}
                {%- if mass_entities | count > 0 %}
                  {%- set mass_data = dict(
                                            mass_playing = entity.entity_id in cast_mass_playing,
                                            mass_sync = entity.entity_id | replace('.', '.mass_')
                                          )
                  %}
                  {%- set general = dict(general, **mass_data) %}
                {%- endif %}
                {# check if there is a Spotify account playing on this entity #}
                {%- set list_check = expand([ entity.entity_id ] + members) | map(attribute='name') | list %}
                {%- set spotify_entity = expand(integration_entities('spotify'))
                                            | selectattr('state', 'eq', 'playing')
                                            | selectattr('attributes.source', 'in', list_check)
                                            | map(attribute='object_id')
                                            | join
                                            | replace('spotify_', '')
                %}
                {# add volume level #}
                {%- if not entity.state in ['off', 'unavailable', 'unknown', 'playing'] %}
                  {%- set additional = dict( volume_level = entity.attributes.volume_level | round(2)) %}
                {# add metadata for playing entities #}
                {% elif entity.state == 'playing' or spotify_entity %}
                  {%- set additional = dict(
                                            state = 'playing',
                                            app_name = entity.attributes.app_name,
                                            volume_level = entity.attributes.volume_level | round(2),
                                            media_content_id = (entity.attributes.get('media_content_id', {}) | from_json).get('contentId', 'no media_content')
                                                                if entity.attributes.get('app_name') == 'Google Podcasts'
                                                                else entity.attributes.get('media_content_id', 'no media_content'),
                                            media_position = (as_timestamp(now()) | round(2)
                                                              - as_timestamp(entity.attributes.get('media_position_updated_at', now())) | round(2)
                                                              + entity.attributes.get('media_position', 0)) | round(2)
                                            )
                  %}
                  {# add Spotify account #}
                  {% if entity.attributes.get('app_name') == 'Spotify' %}
                    {%- set spotcast = spotify_entity if spotify_entity
                                              and settings.primary_spotcast is defined
                                              and spotify_entity != settings.primary_spotcast
                                              and integration_entities('spotify') | count > 1
                                              and primary_spotcast_check
                                            else 'primary_account' %}
                    {%- set additional = dict(additional,
                                              **dict(state='playing',
                                                      spotcast = spotcast
                                                    )
                                            ) 
                    %}
                  {# add information for ytube_music_player integration #}
                  {%- elif entity.entity_id in expand(ytube_music_entities)
                                                | selectattr('state', 'eq', 'playing')
                                                | selectattr('attributes.remote_player_id', 'defined')
                                                | map(attribute='attributes.remote_player_id')
                                                | list
                  %}
                    {%- set additional = dict(additional,
                                              **dict(app_name='Ytube Music Player',
                                                      yt_player=expand(ytube_music_entities) | selectattr('attributes.remote_player_id', 'defined') | selectattr('attributes.remote_player_id', 'eq', entity.entity_id) | map(attribute='entity_id') | join,
                                                      media_content_id = 'ytube_music'
                                                    )
                                            ) 
                    %}
                  {# add infomration for web streams (including TuneIn) #}
                  {% elif entity.attributes.get('app_name') not in ['Spotify', 'YouTube', 'YouTube Music'] %}
                    {%- if entity.attributes.get('media_artist') in settings.get('radio_data', {}).keys() | list %}
                      {% set data = settings.radio_data[entity.attributes.media_artist] %}
                      {% set picture, title = data.get('picture'), data.get('title') %}
                    {% endif %}
                    {%- set additional = dict(additional, **dict(
                                                  media_artist = 'Google Podcasts' if entity.attributes.get('app_name') == 'Google Podcasts'
                                                                  else entity.attributes.get('media_artist', 'no artist'),
                                                  media_title = title if title is defined else entity.attributes.get('media_title', 'no title'),
                                                  media_content_type = '' ~ entity.attributes.get('media_content_type', 'no type'),
                                                  entity_picture = picture if picture is defined else entity.attributes.get('entity_picture', 'no pic')
                                                  ))
                    %}
                  {% endif %}
                {% endif %}
              {# cobmine all data #}
              {%- set ns.info = ns.info + [ dict(general, **additional) if additional is defined else general ] %}
            {%- endfor %}
            {{ ns.info }}
          {%- else %}
            {{ player_data }}
          {%- endif %}
    - alias: "Create snapshot of active Music Assistant entities"
      repeat:
        for_each: "{{ mass_playing }}"
        sequence:
          - alias: "Create snapshot"
            service: mass.queue_command
            target:
              entity_id: "{{ repeat.item }}"
            data:
              command: snapshot_create
    - alias: "Interrupt YouTube music if needed"
      if: >
        {{
          player_data
            | selectattr('yt_player', 'defined')
            | list
            | count > 0
        }}
      then:
        - service: ytube_music_player.call_method
          data:
            entity_id: >
              {{
                player_data
                  | selectattr('yt_player', 'defined')
                  | map(attribute='yt_player')
                  | list
              }}
            command: interrupt_start
    - alias: "Wait until white noise started"
      wait_template: >
        {{ 
          expand(states.media_player)
            | selectattr('attributes.media_title', 'eq', check_for_title)
            | map(attribute='entity_id')
            | list
            | count > 0
        }}
      timeout: "00:00:30"
      continue_on_timeout: false
    - alias: "Determine target for service calls"
      variables:
        target: >
          {{
            expand(integration_entities('cast'))
              | selectattr('attributes.media_title', 'eq', check_for_title)
              | map(attribute='entity_id')
              | first
          }}
        target_list: >
          {%- if target_conversion is defined and target_conversion %}
            {%- set new = target_conversion.get(target, target) %}
            {{ new.replace(' ', '').split(',') if new is string else new }}
          {%- else %}
            {{ [ target ] }}
          {%- endif %}
    - alias: "Stop ambient sound"
      service: media_player.media_stop
      target:
        entity_id: "{{ target }}"
    - alias: "Wrong actions provided"
      choose:
        - conditions: "{{ service_calls | count == 0 }}"
          sequence:
            - stop: "There were no service calls defined, no actions are performed. The script script has been aborted."
              error: true
        - conditions: "{{ no_service_count > 0 }}"
          sequence:
            - service: system_log.write
              data:
                level: "warning"
                logger: "{{ this.entity_id }}"
                message: >
                  {{ no_service_count }} out of {{ service_calls | count }} actions were not performed because they are not service calls.
    - alias: "Wait until plaer is idle"
      wait_template: "{{ is_state(target, 'idle') }}"
    - alias: "Use resume script or perform actions"
      if: "{{ use_resume if use_resume is defined else true }}"
      then:
        - alias: "Send actions using Google Home Resume script"
          service: script.turn_on
          target:
            entity_id: script.google_home_resume
          data:
            variables:
              target_list: "{{ target_list }}"
              player_data: "{{ player_data }}"
              cast_mass_playing: "{{ cast_mass_playing }}"
              action: >
                {%- set ns = namespace(action=[]) %}
                {%- for item in service_calls %}
                  {%- set data = item.get('data', {}) %}
                  {%- set extra = item.get('extra', {}) %}
                  {%- set service = item.service %}
                  {%- if target_variable is defined and target_variable %}
                    {%- if service == 'script.turn_on' %}
                      {% set add = {'voice_target': target_list[0]} %}
                      {% set var = dict(variables = dict(data.get('variables', {}), **add)) %}
                      {% set data = dict(data, **var) %}
                    {%- elif service.split('.')[0] == 'script' %}
                      {% set add = { 'voice_target': target_list[0]} %}
                      {% set data = dict(data, **add) %}
                    {%- endif %}
                    {%- set add = {'entity_id': target_list[0]} %}
                    {%- set extra = dict(extra, **add) %}
                  {%- endif %}
                  {%- set ns.action = ns.action + [
                                                    dict(
                                                      service = service,
                                                      target = item.get('target', { 'entity_id' : target_list}),
                                                      data = data,
                                                      extra = extra
                                                      )
                                                  ]
                  %}
                {%- endfor %}
                {{ ns.action }}
        - alias: "Resume ytube players which are not a target"
          if: >
            {{
              player_data
                | selectattr('media_content_id', 'eq', 'ytube_music')
                | rejectattr('entity_id', 'in', target_list)
                | list
                | count > 0
            }}
          then:
            - variables:
                ytube_resume: >
                  {{ player_data
                              | selectattr('media_content_id', 'eq', 'ytube_music')
                              | rejectattr('entity_id', 'in', target_list)
                              | map(attribute='entity_id')
                              | list
                  }}
            - repeat:
                for_each: "{{ ytube_resume }}"
                sequence:
                  - alias: "Variables for specific media_player"
                    variables:
                      player: "{{ player_data | selectattr('entity_id', 'eq', repeat.item) | join }}"
                  - service: script.turn_on
                    target:
                      entity_id: script.google_home_resume_helper
                    data:
                      variables:
                        start_time: "{{ now() }}"
                        player: "{{ player }}"
                        member_data: "{{ player_data | selectattr('entity_id', 'in', player.members) | list }}"
                        players_to_resume: "{{ players_to_resume }}"
                        event_script: "{{ event_script }}"
                        resume: "{{ repeat.item in players_to_resume }}"
                        ytube_resume: true
                        action_type: resume
      else:
        - alias: "Perform service calls defined in action"
          repeat:
            for_each: "{{ service_calls }}"
            sequence:
              - variables:
                  data: >
                    {%- set data = repeat.item.get('data', {}) %}
                    {%- set service = repeat.item.service %}
                    {%- if target_variable is defined and target_variable %}
                      {%- if service == 'script.turn_on' %}
                        {% set add = {'voice_target': target_list[0]} %}
                        {% set var = dict(variables = dict(data.get('variables', {}), **add)) %}
                        {{ dict(data, **var) }}
                      {%- elif service.split('.')[0] == 'script' %}
                        {% set add = { 'voice_target': target_list[0]} %}
                        {{ dict(data, **add) }}
                      {%- else %}
                        {{ data }}
                      {%- endif %}
                    {%- else %}
                      {{ data }}
                    {%- endif %}
              - service: "{{ repeat.item.service }}"
                target: "{{ repeat.item.get('target', { 'entity_id': target_list}) }}"
                data: "{{ data }}"
    - alias: "Volume defined"
      if: "{{ volume is defined and iif(volume) }}"
      then:
        - alias: "Apply volume"
          service: media_player.volume_set
          target:
            entity_id: "{{ target_list }}"
          data:
            volume_level: >
              {{ [1, volume if volume <= 1 else volume / 100] | min }}
