# Automation for automatic resume after specific service calls
automation:
  - alias: 00 - Google Home Automatic Resume
    id: 417395bc-bd64-40a3-b20a-9062d426a01f
    mode: parallel
    max_exceeded: silent
    trigger:
      - platform: event
        enabled: true
        event_type: call_service
        event_data:
          domain: media_player
          service: play_media
        variables:
          announce_volume: "{{ state_attr('script.google_home_resume', 'settings').get('announce_volume_automation') }}"
        id: play
      - platform: event
        enabled: true
        event_type: call_service
        event_data:
          domain: cast
          service: show_lovelace_view
        id: cast
    # variables:
    #   version: *ver
    #   settings: *settings
    #   entities: >
    #     {%- set e = trigger.event.data.service_data.entity_id %}
    #     {%- set e = (e | replace(' ', '')).split(',') if e is string else e %}
    #     {%- set e = expand(e) | map(attribute='entity_id') | list %}
    #     {%- set speaker_groups = settings.get('speaker_groups') | default({}, true) %}
    #     {%- set members = speaker_groups.items() | selectattr('0', 'in', e) | map(attribute='1') | sum(start=[]) %}
    #     {{ e + members }}
    condition:
      - alias: "Check if announce was set on the service call"
        condition: template
        value_template: "{{ trigger.id == 'cast' or trigger.event.data.service_data.get('announce', false) }}"
      - alias: "Check if automation in enabled in script settings"
        condition: template
        value_template: "{{ settings.automation_enabled | default(true) }}"
      - alias: "Check if entity targeted is in cast of mass integration"
        condition: template
        value_template: "{{ entities | select('in', integration_entities('cast') + integration_entities('mass')) | list | count > 0 }}"
      - alias: "Check if dashboard resume is enabled in case of dashboard cast trigger"
        condition: template
        value_template: "{{ trigger.id == 'play' or settings.get('dashboard_cast') | default(true) or settings.get('dashboard_cast') is none }}"
    action:
      # - alias: Set variables to be used in the automation
      #   variables: *generic_vars
      - alias: "Failsafe to remove all groups if no resume scripts are not running"
        if: >
          {{ 
            is_state_attr('script.google_home_resume', 'current', 0)
            and integration_entities('group')
                  | select('search', 'ghresume')
                  | list | count > 0
          }}
        then:
          - alias: "Which groups to remove"
            variables:
              groups_existing: >
                {{ integration_entities('group') | select('search', 'ghresume') | list }}
          - alias: "Loop to remove groups"
            repeat:
              for_each: "{{ groups_existing }}"
              sequence:
                - alias: "Remove one group"
                  service: group.remove
                  data:
                    object_id: "{{ states[repeat.item].object_id }}"
      - alias: "Check if target is already being resumed on in a group which is already being resumed"
        condition: template
        value_template: &group_check >
          {%- set groups = states.group
                    | selectattr('entity_id', 'search', 'resume_script_active_ghresume_')
                    | map(attribute='entity_id')
                    | list
          %}
          {%- set active = expand(groups)
                            | rejectattr('state', 'in', ['unknown', 'unavailable'])
                            | map(attribute='entity_id')
                            | unique
                            | list
          %}
          {%- set members = speaker_groups.items() | selectattr('0', 'in', active) | map(attribute='1') | sum(start=[]) %}
          {%- set active = active + members %}
          {%- set target_members = speaker_groups.items() | selectattr('0', 'in', entities) | map(attribute='1') | sum(start=[]) %}
          {%- set entities = (entities + target_members) | reject('in', speaker_group_list) | unique | list %}
          {{ entities | reject('in', active) | list | count > 0 }}
      - alias: Are there Spotify entities?
        if: "{{ integration_entities('spotify') | count > 0 }}"
        then:
          - alias: Update Spotify entities
            service: homeassistant.update_entity
            target:
              entity_id: "{{ integration_entities('spotify') }}"
      - alias: Set data_source and determine target list
        variables:
          data_source: automation
          target_list: >
            {{
              (integration_entities('cast') + integration_entities('mass'))
                | select('in', entities)
                | list
            }}
      # - variables:
      #     player_data: *player_data
      # - alias: Create snapshot of active Music Assistant entities
      #   repeat: *mass_snapshot
      - alias: "Interrupt YouTube music if needed"
        if: >
          {{ player_data | selectattr('entity_id', 'in', target_list) | selectattr('yt_player', 'defined') | list | count > 0 }}
        then:
          - service: ytube_music_player.call_method
            data:
              entity_id: >
                {{ player_data | selectattr('entity_id', 'in', target_list) | selectattr('yt_player', 'defined') | map(attribute='yt_player') | list }}
              command: interrupt_start
      - if: "{{ trigger.id == 'play' and announce_volume is defined and iif(announce_volume) }}"
        then:
          - wait_template: "{{ is_state(entities|first, 'idle') }}"
          - alias: Set volume for announcement
            service: media_player.volume_set
            target:
              entity_id: "{{ entities }}"
            data:
              volume_level: "{{ announce_volume }}"
      - alias: "Short delay"
        delay: 0.5
      - alias: "Check again if target is already being resumed"
        condition: template
        value_template: *group_check
      - alias: Send actions using Google Home Resume script
        service: script.turn_on
        target:
          entity_id: script.google_home_resume
        data:
          variables:
            start_time: "{{ start_time }}"
            automation: true
            target_list: "{{ target_list }}"
            player_data: "{{ player_data }}"
            cast_mass_playing: "{{ cast_mass_playing }}"
