# This package uses the public Postcodeloterij REST API to get the information from each monthly draw and the extra draws in June and December
# It consists of 2 parts
# 1. Rest Command:
#    The rest command uses the API to retreive the draw results. In the payload the postal code has to be provided, I've put it in a secret
#    but you can also add it directly in the configuration. Make sure to provide it as "query=1234AB" where "1234AB" is your postal code
#    so not the postal code only, "query=" has to be included (also if you secrets.yaml)
#    By default it will get the results from the monthly draw of the previous month (so April if the current month is May)
#    In case you want to specify another monht, you can provide it when you issue the rest command under data as "monht=YYYYM" (eg "month=202405")
#    In case you want to get the results of an extra draw, ad "extra: true" to the action data. The month for the June draw is YYYY13 (eg 202413),
#    for the December draw it's YYYY14 (eg 202414)
# 2. Template Sensor
#    The template sensor will be updated at 18:15 of the first 3 days of the month (in case a trigger was missed on the other days because the
#    server was rebooting for example). You can also update it manually by issuing the "update_postcodeloterij_prizes" event in developer tools >
#    events.
#    Make sure to update the "notify_action" variable on line 55 so notifications will be sent to the right device. The notify action is optmized
#    for the companion app on an Android phone, you might want to adjuct the action data of the action in case you use an iPhone or other device
#    A notification will only be sent if there are prizes won, and if the prizes for that particular month weren't already in the template sensor data
#    so it won't be sent every time the sensor updates (on the first 3 days of the month, or after manually updating it using the event)
#    The template sensor will automatically check for the extra draws from June and December in the month after, so in July and January the results
#    of those extra draws will be included in the template sensor and notification.
#
# This configuration can be included directly in your configuration.yaml. If you already have the "rest_command" and/or "template" integration
# configured there, make sure to not duplicate the integration keys, but paste it under the existing key. If you use a "template.yaml" file which
# you include from your configuration, paste the template part there (do not include the "template" key and make sure the indentation matches the
# already existing configuration in that file)
# You can also include it as a package like I do, for more information see https://www.home-assistant.io/docs/configuration/packages/

rest_command:
  postcodeloterij:
    url: https://www.postcodeloterij.nl/public/rest/drawresults/winnings/NPL/P_{{ 'E' if extra | default(false) | bool(false) else 'M' }}T_P{{ month | default((now().replace(day=1) - timedelta(days=1)).strftime("%Y%m")) }}/?resultSize=10
    method: POST
    # format for the payload is "query=1234AB" where 1234AB is the postal code
    payload: !secret postcodeloterij
    headers:
      Content-Type: application/x-www-form-urlencoded
      User-Agent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"

template:
  - triggers:
      # the sensor will be automatically updated on the first 3 days of the month, at 18:00
      - alias: trigger at 18:00
        trigger: time
        at: "18:15"
        # you can use the event below in developer tools > events to manually update the sensor
      - alias: trigger on manual event
        trigger: event
        event_type: update_postcodeloterij_prizes
        id: manual
    conditions:
      - alias: Check if it triggered on the manual event, or if it is the in the first 3 days of the month
        condition: template
        value_template: "{{ trigger.id == 'manual' or now().day in [1,2,3] }}"
    actions:
      - variables:
          notify_action: notify.mobile_app_pixel_10_pro
      - alias: Create variables for the month to use in the rest commands and messages
        variables:
          month: >
            {{
              trigger.event.data.month | int
              if
                trigger.platform == 'event'
                and trigger.event.data is defined
                and 'month' in trigger.event.data
              else
                (now().replace(day=1) - timedelta(days=1)).strftime("%Y%m") | int
            }}
          month_formatted: >
            {% set months = ['januari', 'februari', 'maart', 'april', 'mei', 'juni', 'juli', 'augustus', 'september', 'october', 'november', 'december'] %}
            {{ months[month % 100 -1] ~ ' ' ~ month // 100 }}
      - alias: Issue rest command for the monthly draws
        action: rest_command.postcodeloterij
        data:
          month: "{{ month }}"
        response_variable: prizes
      - alias: Issue rest command for the extra draws in June and December
        action: rest_command.postcodeloterij
        data:
          extra: true
          month: >
            {% set y = month // 100 %}
            {% set m = month % 100 %}
            {% set mapping = {6: 13, 12: 14} %}
            {{ y * 100 +  mapping[m] | default(m) }}
        response_variable: prizes_extra
      - alias: Create variables for the results of the rest commands
        variables:
          # normal monthly draw
          prizecount: "{{ prizes.content.prizeCount }}"
          prizes: >
            {% set ns = namespace(prizes=[]) %}
            {% for p in prizes.content.wonPrizes %}
              {% set ns.prizes = ns.prizes + [p.description ~ ' (€ ' ~'{:.2f}'.format(p.prizeValue / 100) ~ ')'] %}
            {% endfor %}
            {{ ns.prizes }}
          prize_text: >
            {% if prizecount > 0 %}
              {% set m = 'prijs' if prizecount == 1 else (prizecount ~ ' prijzen') %}
              {{ m }} in de trekking van {{ month_formatted }}: {{ prizes | join(', ') }}
            {% endif %}
          # extra draw
          prizecount_extra: "{{ prizes_extra.content.prizeCount }}"
          prizes_extra: >
            {% set ns = namespace(prizes=[]) %}
            {% for p in prizes_extra.content.wonPrizes %}
              {% set ns.prizes = ns.prizes + [p.description ~ ' (€ ' ~'{:.2f}'.format(p.prizeValue / 100) ~ ')'] %}
            {% endfor %}
            {{ ns.prizes }}
          prize_text_extra: >
            {% if prizecount_extra > 0 %}
              {% set m = 'prijs' if prizecount_extra == 1 else (prizecount_extra ~ ' prijzen') %}
              {{ m }} in de extra trekking: {{ prizes_extra | join(', ') }}
            {% endif %}
          # combined
          prizecount_total: "{{ prizecount + prizecount_extra }}"
          prize_text_full: >
            We hebben {{ [prize_text, prize_text_extra] | select() | join(' en ') }}
        # a notification will be sent out if something is won, and it's the first time the sensor was updated this month
        # notification parameters are optimized for the Android companion app
      - alias: Send out notification to phone in case there are one of more pizes
        if: >
          {{
            prizecount_total | default(0) > 0
            and month_formatted != state_attr('sensor.postcodeloterij', 'month')
          }}
        then:
          - alias: "Send notification"
            action: "{{ notify_action }}"
            data:
              title: "🎁 Winnen doe je bij..."
              message: "{{ prize_text_full }}"
              data:
                channel: LotteryPrize
                ttl: 0
                priority: high
                notification_icon: mdi:gift
                tag: LotteryPrize
    sensor:
      - name: Postcodeloterij
        unique_id: 12f71395-3d76-434a-a3d0-9f01a03b834c
        icon: "{{ 'mdi:gift' if prizecount > 0 else 'mdi:emoticon-cry' }}"
        state: "{{ prizecount + prizecount_extra }}"
        attributes:
          prizes: "{{ prizes }}"
          month: "{{ month_formatted }}"
          extra: "{{ month % 100 in [6, 12] }}"
          prizes_extra: "{{ prizes_extra }}"
          last_updated: "{{ now().strftime('%d-%m-%Y %H:%M') }}"
