# This autamation uses ChatGPT to process the query in the sentence
# You need to specify the reminder recipients and the corresponding notify actions
#
# This is the prompt used
#
# You are an AI process that transforms a reminder query into structured json.

# Here is the structured JSON that I expect in response { "datetime": "2024-11-11T15:00:00+01:00", "to_notify": ["notify.mobile_app_pixel_7_pro"], "reminder": "Take out the trash"] }

# "datetime" is an isoformat datetime string. If the query only specifies the time, this is the time of the next occurance. For example if the current time is 11:00 in the morning, and the query asks for a reminder to be set at 3 o clock, this will mean in the afternoon. If the current time is 5 in the afternoon, 3 o clock will mean 3 at night (3:00)
# The timezone for the Netherlands (Amsterdam) should be included in the isoformat datetime string and DST should be taken into account.

# "to_notify" is a list of notify services. Always output as a list, also when there is ony one value. The notify services can be taken from the following list

# - name: Martijn
#   description: Father of the house
#   service: notify.mobile_app_pixel_7_pro
# - name: Marleen
#   description: Mother of the house
#   service: notify.mobile_app_marleen_app

# In case it is not specified for who the reminder is or it is not possible to match it to the list above, assume it needs to be sent to Martijn.

# "reminder" is the subject of the reminder as specified in the query

# The query can be in English or Dutch
# You must reply with only the JSON model, nothing before nor after because your response will be processed by an automation.

# Here are a few examples of input with the expected output (assumming it is currently 10th of August 2024, 13:00):
# "Set a reminder for Marleen to do groceries tomorrow at 10" >> { "datetime": "2024-08-12T10:00:00+01:00", "to_notify": ["notify.mobile_app_marleen_app"], "reminder": "Do groceries"] }
# "Herinner papa en mama er aan om vanmiddag om 3 uur Pepijn een knuffel te geven" >> { "datetime": "2024-08-11T15:00:00+01:00", "to_notify": ["notify.mobile_app_pixel_7_pro", "notify.mobile_app_marleen_app"], "reminder": "Pepijn een knuffel geven"] }

template:
  - trigger:
      - trigger: event
        event_type: assist_update_reminders
    sensor:
      - unique_id: 32131d6a-1a96-467e-bd29-8682f195d07a
        name: Assist Reminder Helper
        state: "{{ trigger.event.data.reminders | count }}"
        attributes:
          reminders: "{{ trigger.event.data.reminders }}"

automation:
  - id: 4ba55865-8e14-474a-b04a-6653c9b513b4
    alias: Voice - Add reminder functionality
    triggers:
      - trigger: conversation
        command:
          - "[zet|creÃ«er|maak] [een] (reminder|herinnering) {query}"
          - "herinner {name} [er] aan {reminder} (over|om|op) {time}"
          - "herinner {name} (over|om|op) {time} [er] aan {reminder}"
        id: add
      - trigger: template
        value_template: >
          {% set first_reminder = 
            state_attr('sensor.assist_reminder_helper', 'reminders') | default([], true)
              | map(attribute='datetime')
              | sort
              | first
              | default('unknown')
          %}
          {{ first_reminder != 'unknown' and now() > as_datetime(first_reminder) }}
        id: send
    actions:
      - choose:
          - conditions: "{{ trigger.id == 'add' }}"
            sequence:
              - alias: Send sentence to ChatGPT
                action: conversation.process
                data:
                  agent_id: conversation.reminder_helper
                  text: "{{ trigger.sentence }}"
                response_variable: response
              - alias: "Set variable with new reminder"
                variables:
                  reminder: "{{ response.response.speech.plain.speech }}"
              - alias: "Update helper template sensor"
                event: assist_update_reminders
                event_data:
                  reminders: >
                    {% set current = state_attr('sensor.assist_reminder_helper', 'reminders') | default([], true) %}
                    {{ current + [reminder] }}
              - alias: "Set response"
                set_conversation_response: "Reminder gezet voor {{ reminder.reminder }} om {{ as_datetime(reminder.datetime).strftime('%H:%M') }}"
          - conditions: "{{ trigger.id == 'send' }}"
            sequence:
              - variables:
                  to_send: >
                    {{
                      state_attr('sensor.assist_reminder_helper', 'reminders') | default([], true)
                        | selectattr('datetime', '<', now().isoformat())
                        | list
                    }}
              - alias: "Send Notifications"
                repeat:
                  for_each: "{{ to_send }}"
                  sequence:
                    - variables:
                        reminder: "{{ repeat.item }}"
                    - repeat:
                        for_each: "{{ reminder.to_notify }}"
                        sequence:
                          - alias: "Send Notifications"
                            action: "{{ repeat.item }}"
                            data:
                              title: Herinnering!
                              message: "{{ reminder.reminder }}"
                              data:
                                channel: Reminders
                                ttl: 0
                                priority: high
                                notification_icon: mdi:reminder
              - alias: Remove reminders which are sent
                event: assist_update_reminders
                event_data:
                  reminders: >
                    {% set current = state_attr('sensor.assist_reminder_helper', 'reminders') | default([], true) %}
                    {{ current | reject('in', to_send) | list }}
