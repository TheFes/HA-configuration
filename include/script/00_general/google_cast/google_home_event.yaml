# Script to resume streams on Google Home speakes after something happened inside your home.
# Example: you can stop the media_players when you leave home, and resume them when you return
# for more details: https://github.com/TheFes/HA-configuration/blob/main/include/script/00_general/google_cast/docs/google_home_event.md
#
google_home_event:
  alias: "00 - Google Home Event"
  description: Script for resuming Google Home speakers
  icon: mdi:cast-audio
  mode: parallel
  fields:
    resume_id:
      description: "ID to match the storing and resuming (default is 'not provided')"
      required: false
      selector:
        text:
    resume:
      description: "True for resuming the states, false for storing the states (default is false)"
      required: false
      selector:
        boolean:
    target:
      description: "Enter the targets cast devices to be resumed afterwards (default is all)"
      required: false
      selector:
        target:
          entity:
            integration: cast
            domain: media_player
          device:
            integration: cast
    ignore:
      description: "Enter the cast devices to be ignored during store and resume (default is none)"
      required: false
      selector:
        target:
          entity:
            integration: cast
            domain: media_player
          device:
            integration: cast
    also_stop:
      description: "Enter the media_players which should also be turned off after storing the data (default is none)"
      required: false
      selector:
        target:
          entity:
            domain: media_player
    resume_volume:
      description: "Volume to be used then resuming the speaker, should be set while storing the data. Eiter use a number between 0 and 1 or 1 and 100 (%)"
      required: false
      selector:
        number:
          min: 0
          max: 100
    remove_data:
      description: "Set to true if you want to remove all stored data (default is false)"
      required: false
      selector:
        boolean:
  variables:
    sensor: binary_sensor.resume_data
    notify: notify.resume_data
  sequence:
    - variables:
        version: 0.6.2
    - variables:
        resume_id: "{{ resume_id if (resume_id is defined and resume_id) else 'not provided' }}"
        resume_volume: >
          {%- if resume_volume is defined and iif(resume_volume) %}
            {{ [1, resume_volume / 100] | min if resume_volume > 1 else resume_volume }}
          {%- endif %}
        ignore_list: >
          {# determine entities of cast integraton #}
            {%- set cast_entities = integration_entities('cast') %}
          {# create target lists #}
          {%- if ignore is defined %}
            {# create lists based on target input #}
              {%- set area_list = ignore.get('area_id', []) %}
              {%- set area_list = area_list.replace(' ' , '').split(',') if area_list is string else area_list %}
              {%- set device_list = ignore.get('device_id', [])%}
              {%- set device_list = device_list.replace(' ' , '').split(',') if device_list is string else device_list %}
              {%- set entity_list = ignore.get('entity_id', []) %}
              {%- set entity_list = entity_list.replace(' ' , '').split(',') if entity_list is string else entity_list %}
            {# determine cast entities of areas #}
              {%- set ns = namespace(area_cast = []) %}
              {%- for area in area_list %}
                {%- set ns.area_cast = ns.area_cast + area_entities(area) %}
              {%- endfor %}
              {%- set area_cast = ns.area_cast | select('in', cast_entities) | list %}
            {# determine cast entities of devices #}
              {%- set ns = namespace(device_cast = []) %}
              {%- for device in device_list %}
                {%- set ns.device_cast = ns.device_cast + device_entities(device) %}
              {%- endfor %}
              {%- set device_cast = ns.device_cast | select('in', cast_entities) | list %}
            {# determine cast entities of all entities #}
              {%- set entity_cast = entity_list | select('in', cast_entities) | list %}
          {# create list with all entities #}
            {{ (area_cast + device_cast + entity_cast) | unique | list }}
          {%- else %}
            []
          {%- endif %}
        target_list: >
          {# determine entities of cast integraton #}
            {%- set cast_entities = integration_entities('cast') %}
          {# create target lists #}
          {%- if target is defined %}
            {# create lists based on target input #}
              {%- set area_list = target.get('area_id', []) %}
              {%- set area_list = area_list.replace(' ' , '').split(',') if area_list is string else area_list %}
              {%- set device_list = target.get('device_id', [])%}
              {%- set device_list = device_list.replace(' ' , '').split(',') if device_list is string else device_list %}
              {%- set entity_list = target.get('entity_id', []) %}
              {%- set entity_list = entity_list.replace(' ' , '').split(',') if entity_list is string else entity_list %}
            {# determine cast entities of areas #}
              {%- set ns = namespace(area_cast = []) %}
              {%- for area in area_list %}
                {%- set ns.area_cast = ns.area_cast + area_entities(area) %}
              {%- endfor %}
              {%- set area_cast = ns.area_cast | select('in', cast_entities) | list %}
            {# determine cast entities of devices #}
              {%- set ns = namespace(device_cast = []) %}
              {%- for device in device_list %}
                {%- set ns.device_cast = ns.device_cast + device_entities(device) %}
              {%- endfor %}
              {%- set device_cast = ns.device_cast | select('in', cast_entities) | list %}
            {# determine cast entities of all entities #}
              {%- set entity_cast = entity_list | select('in', cast_entities) | list %}
          {# create list with all entities #}
            {% set target_list = (area_cast + device_cast + entity_cast) | unique | list %}
          {%- else %}
            {% set target_list = integration_entities('cast') %}
          {%- endif %}
          {{ target_list | reject('in', ignore_list) | list }}
        all: "{{ target_list == integration_entities('cast') }}"
    - alias: "Store or resume or remove data"
      choose:
        - conditions: "{{ remove_data if remove_data is defined else false }}"
          sequence:
            - variables:
                resume_data: []
            - event: store_data
              event_data:
                resume_data: "{{ resume_data }}"
            - alias: "Persistant backup of player_data"
              if: "{{ notify is defined and iif(notify) }}"
              then:
                - service: "{{ notify }}"
                  data:
                    message: >
                      {%- set data = { 'resume_data': resume_data } %}
                      '{{ data | tojson }}'
                - service: homeassistant.update_entity
                  target:
                    entity_id: sensor.resume_data
        - conditions: "{{ not resume if resume is defined else true }}"
          sequence:
            - alias: "Are there Spotify entities?"
              if: "{{ integration_entities('spotify') | count > 0 }}"
              then:
                - alias: "Update Spotify entities"
                  service: homeassistant.update_entity
                  target:
                    entity_id: "{{ integration_entities('spotify') }}"
            - variables:
                mass_entities: "{{ integration_entities('mass') | select('match', '^media_player.') | list }}"
                cast_mass_playing: >
                  {{
                    expand(integration_entities('cast'))
                      | selectattr('attributes.media_title', 'defined')
                      | selectattr('attributes.media_title', 'search', 'Streaming from Music Assistant')
                      | map(attribute='entity_id')
                      | list
                  }}
                mass_playing: "{{ (cast_mass_playing | join(',') | replace('.', '.mass_')).split(',') | select() | list }}"
                player_data: >
                  {%- set ns = namespace(info=[]) %}
                  {%- for entity in expand(integration_entities('cast')) %}
                      {%- set general = dict(
                                              data_source = 'event_script',
                                              entity_id = entity.entity_id,
                                              state = entity.state,
                                              target = iif(entity.entity_id in target_list,'target', 'no_target')
                                              )
                      %}
                      {%- if mass_entities | count > 0 %}
                        {%- set mass_data = dict(
                                                  mass_playing = entity.entity_id in cast_mass_playing,
                                                  mass_sync = entity.entity_id | replace('.', '.mass_')
                                                )
                        %}
                        {%- set general = dict(general, **mass_data) %}
                      {%- endif %}
                      {%- if entity.attributes.app_name is defined and entity.attributes.app_name == 'Spotify' %}
                        {%- set additional = dict(
                                                  app_name = 'Spotify',
                                                  volume_level = entity.attributes.volume_level,
                                                  media_position =  as_timestamp(now()) | round(2)
                                                                    - as_timestamp(entity.attributes.get('media_position_updated_at', now())) | round(2) 
                                                                    + entity.attributes.get('media_position', 0)
                                                  )
                        %}
                      {%- elif entity.attributes.app_name is defined and entity.attributes.app_name in ['YouTube', 'YouTube Music'] %}
                        {%- set additional = dict(
                                                  app_name = entity.attributes.app_name,
                                                  volume_level = entity.attributes.volume_level,
                                                  media_content_id = entity.attributes.get('media_content_id', 'no media_content'),
                                                  media_position =  as_timestamp(now()) | round(2)
                                                                    - as_timestamp(entity.attributes.get('media_position_updated_at', now())) | round(2) 
                                                                    + entity.attributes.get('media_position', 0)
                                                  )
                        %}
                      {%- elif entity.state == 'playing' %}
                        {%- set additional = dict(
                                                  app_name = entity.attributes.app_name,
                                                  volume_level = entity.attributes.volume_level,
                                                  media_content_id = entity.attributes.get('media_content_id', 'no media_content'),
                                                  media_title = entity.attributes.get('media_title', 'no title'),
                                                  media_artist = entity.attributes.get('media_artist', 'no artist'),
                                                  media_content_type = entity.attributes.get('media_content_type', 'no type'),
                                                  entity_picture = entity.attributes.get('entity_picture', 'no pic'),
                                                  media_position =  as_timestamp(now()) | round(2)
                                                                    - as_timestamp(entity.attributes.get('media_position_updated_at', now())) | round(2) 
                                                                    + entity.attributes.get('media_position', 0)
                                                  )
                        %}
                      {%- endif %}
                    {% set ns.info = ns.info + [ dict(general, **additional) if additional is defined else general ] %}
                  {%- endfor %}
                  {{ ns.info }}
                ytube_music_data: >
                  {%- set ns = namespace(info = []) %}
                  {%- for entity in expand(integration_entities('ytube_music_player')) %}
                    {% if entity.state == 'playing' %}
                      {%- set ns.info = ns.info + [
                                                      dict(
                                                            player = entity.entity_id,
                                                            target = entity.attributes.get('remote_player_id', 'No target'),
                                                            position =  as_timestamp(now()) | round(2)
                                                                        - as_timestamp(entity.attributes.get('media_position_updated_at', now())) | round(2) 
                                                                        + entity.attributes.get('media_position', 0),
                                                            data_source = 'event_script'
                                                          )
                                                    ]
                      %}
                    {%- endif %}
                  {%- endfor %}
                  {{ ns.info | selectattr('target', 'in', target_list) | list if not all else ns.info }}
                spotify_data: >
                  {%- set entities = expand(integration_entities('spotify')) %}
                  {%- set ns = namespace(info=[]) %}
                  {%- for entity in entities %}
                    {% if entity.state == 'playing' %}
                      {%- set ns.info = ns.info + [
                                                    dict(
                                                          entity_id = entity.entity_id, 
                                                          source = entity.attributes.get('source', 'No source'),
                                                          data_source = 'event_script'
                                                        ) 
                                                  ] 
                      %}
                    {%- endif %}
                  {%- endfor %}
                  {%- set target_friendly = expand(target_list) | map(attribute='attributes.friendly_name') | list %}
                  {{ ns.info | selectattr('source', 'in', target_friendly) | list if not all else ns.info }}
                resume_data_new:
                  - resume_id: "{{ resume_id }}"
                    player_data: "{{ player_data }}"
                    spotify_data: "{{ spotify_data }}"
                    ytube_music_data: "{{ ytube_music_data }}"
                    cast_mass_playing: "{{ cast_mass_playing }}"
                resume_data: >
                  {{ state_attr(sensor, 'resume_data') | rejectattr('resume_id', 'eq', resume_id) | list + resume_data_new }}
            - event: store_data
              event_data:
                resume_data: "{{ resume_data }}"
            - alias: "Persistant backup of player_data"
              if: "{{ notify is defined and iif(notify) }}"
              then:
                - service: "{{ notify }}"
                  data:
                    message: >
                      {%- set data = { 'resume_data': resume_data } %}
                      '{{ data | tojson }}'
                - service: homeassistant.update_entity
                  target:
                    entity_id: sensor.resume_data
            - alias: "Interrupt YouTube music if needed"
              if: "{{ ytube_music_data | count > 0 }}"
              then:
                - service: ytube_music_player.call_method
                  data:
                    entity_id: >
                      {{
                        ytube_music_data
                                  | rejectattr('target', 'in', target_list)
                                  | map(attribute='player')
                                  | list
                      }}
                    command: interrupt_start
            - alias: "Create snapshot of active Music Assistant entities"
              repeat:
                for_each: "{{ mass_playing }}"
                sequence:
                  - alias: "Create snapshot"
                    service: mass.queue_command
                    target:
                      entity_id: "{{ repeat.item }}"
                    data:
                      command: snapshot_create
            - variables:
                also_stop_list: >
                  {# create also_stop lists #}
                  {%- if also_stop is defined %}
                    {# create lists based on target input #}
                      {%- set area_list = also_stop.get('area_id', []) %}
                      {%- set area_list = area_list.replace(' ' , '').split(',') if area_list is string else area_list %}
                      {%- set device_list = also_stop.get('device_id', [])%}
                      {%- set device_list = device_list.replace(' ' , '').split(',') if device_list is string else device_list %}
                      {%- set entity_list = also_stop.get('entity_id', []) %}
                      {%- set entity_list = entity_list.replace(' ' , '').split(',') if entity_list is string else entity_list %}
                    {# determine cast entities of areas #}
                      {%- set ns = namespace(area_cast = []) %}
                      {%- for area in area_list %}
                        {%- set ns.area_cast = ns.area_cast + area_entities(area) %}
                      {%- endfor %}
                      {%- set area_list = ns.area_cast | select('match', '^media_player') | list %}
                    {# determine cast entities of devices #}
                      {%- set ns = namespace(device_cast = []) %}
                      {%- for device in device_list %}
                        {%- set ns.device_cast = ns.device_cast + device_entities(device) %}
                      {%- endfor %}
                      {%- set device_list = ns.device_cast | select('match', '^media_player') | list %}
                  {# create list with all entities #}
                    {{ (area_list + device_list + entity_list) | unique | list }}
                  {%- else %}
                    []
                  {%- endif %}
            - service: media_player.turn_off
              target:
                entity_id: "{{ (integration_entities('cast') | select('in', target_list) | list + also_stop_list) | unique | list }}"
        - conditions: "{{ resume if resume is defined else false }}"
          sequence:
            - variables:
                player_data: >
                  {{ state_attr(sensor, 'resume_data') | selectattr('resume_id', 'eq', resume_id) | map(attribute='player_data') | join }}
                spotify_data: >
                  {{ state_attr(sensor, 'resume_data') | selectattr('resume_id', 'eq', resume_id) | map(attribute='spotify_data') | join }}
                ytube_music_data: >
                  {{ state_attr(sensor, 'resume_data') | selectattr('resume_id', 'eq', resume_id) | map(attribute='ytube_music_data') | join }}
                players_to_resume: >
                  {% set player_list = player_data
                                        | selectattr('target', 'eq', 'target')
                                        | selectattr('state', 'eq', 'playing')
                                        | map(attribute='entity_id')
                                        | list
                  %}
                  {{ player_list | select('in', target_list) | list}}
                cast_mass_playing: >
                  {{ state_attr(sensor, 'resume_data') | selectattr('resume_id', 'eq', resume_id) | map(attribute='cast_mass_playing') | join }}
            - alias: "Anything to resume?"
              if: "{{ players_to_resume | count > 0 }}"
              then:
                - alias: "Resume players"
                  service: script.turn_on
                  target:
                    entity_id: script.google_home_resume
                  data:
                    variables:
                      player_data: "{{ player_data }}"
                      spotify_data: "{{ spotify_data }}"
                      ytube_music_data: "{{ ytube_music_data }}"
                      players_to_resume: "{{ players_to_resume }}"
                      cast_mass_playing: "{{ cast_mass_playing }}"
                      action: []
                      event_script: true
            - variables:
                resume_data: >
                  {{ state_attr(sensor, 'resume_data') | rejectattr('resume_id', 'eq', resume_id) | list }}
            - event: store_data
              event_data:
                resume_data: "{{ resume_data }}"
            - alias: "Persistant backup of player_data"
              if: "{{ notify is defined and iif(notify) }}"
              then:
                - service: "{{ notify }}"
                  data:
                    message: >
                      {%- set data = { 'resume_data': resume_data } %}
                      '{{ data | tojson }}'
                - service: homeassistant.update_entity
                  target:
                    entity_id: sensor.resume_data
