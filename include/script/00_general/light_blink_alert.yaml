light_blink_alert:
  alias: "00 - Blink lights to alert"
  icon: mdi:alert
  mode: single
  max_exceeded: silent
  variables:
    blink:
      always:
        - light.slaapkamer
        - light.eettafel
        - light.tv_lamp
        - light.hal
        - light.overloop
        - light.badkamer_zolder_template
        - light.werkkamer_marleen
        - light.badkamer
      only_on:
        - light.pepijn
        - light.pepijn_leeslamp
        - light.floris
        - light.leeslamp_floris
        - light.slaapkamer_zolder_plafond_template
        - light.werkkamer_martijn_plafond_template
    hue:
      - light.floris
      - light.leeslamp_floris
  sequence:
    - alias: "Determine which lights are one and should blink"
      variables:
        lights: >
          {{ blink.only_on | select('is_state', 'on')  | list + blink.always }}
        effect: >
          {{
            expand(lights)
              | rejectattr('entity_id', 'in', 'hue')
              | selectattr('attributes.effect_list', 'defined')
              | selectattr('attributes.effect_list', 'contains', 'Slow Pulse')
              | map(attribute='entity_id')
              | list
          }}
        other: "{{ lights | reject('in', hue + effect) | list}}"
    - alias: "Create scene with current state"
      service: scene.create
      data:
        scene_id: before
        snapshot_entities: "{{ lights }}"
    - alias: "Hue lights to blink?"
      if: "{{ lights | select('in', hue) | list | count > 0 }}"
      then:
        - alias: "Blink lights (hue_lights)"
          service: light.turn_on
          target:
            entity_id: "{{ lights | select('in', hue) | list }}"
          data:
            flash: long
    - alias: "Lights with pulse effecst"
      if: "{{ effect | count > 0 }}"
      then:
        - alias: "Blink lights"
          service: light.turn_on
          target:
            entity_id: "{{ effect }}"
          data:
            effect: "Slow Pulse"
    - alias: "Others lights to blink?"
      if: "{{ other | count > 0 }}"
      then:
        - alias: "Blink other lights using repeat loop"
          repeat:
            count: 10
            sequence:
              - alias: "Toggle other lights"
                service: light.toggle
                data:
                  entity_id: "{{ other }}"
              - alias: "Short delay between toggle"
                delay: 0.5
    - alias: "Restore state"
      service: scene.turn_on
      target:
        entity_id: scene.before
