id: 10d5d325-1ed3-47a8-9352-b1b1d121802e
alias: "Ulanzi notificatons and custom apps"
mode: queued
trigger:
  # apps - text
  - platform: state
    entity_id: weather.combined
    to: ~
    variables: &weather
      app: weather
      text: "{{ state_attr('weather.combined', 'temperature') }} Â°C"
      icon: "{{ states('weather.combined') }}"
      update: "{{ state_attr('weather.combined', 'temperature') is not none }}"
  - platform: state
    entity_id: weather.combined
    attribute: temperature
    variables: *weather

  - platform: state
    entity_id:
      - sensor.werkkamer_martijn_temp
      - sensor.werkkamer_martijn_vocht
    not_to: unavailable
    variables:
      app: "{{ trigger.to_state.attributes.device_class }}"
      text: "{{ states(trigger.entity_id, with_unit=true) }}"
      icon: >
        {% if app == 'humidity' %}
          humidity
        {% elif trigger.to_state.state | float >= 25 %}
          temp-hot
        {% elif trigger.to_state.state | float <= 18 %}
          temp-cold
        {% else %}
          temp-normal
        {% endif %}

  # notifications - text
  - platform: state
    entity_id: sensor.pixel_7_pro_last_notification
    to: ~
    variables:
      sender_name: !secret name_gf
      update: >
        {{
          trigger.to_state.attributes['package'] is defined
          and trigger.to_state.attributes['package'] == 'com.whatsapp'
          and trigger.to_state.attributes['android.title'] == sender_name
          and is_state('person.martijn', 'home')
        }}
      icon: whatsapp
      text: >
        {%- if trigger.to_state.attributes['android.textLines'] is defined %}
          {{ trigger.to_state.attributes['android.textLines'] | last }}
        {%- else %}
          {{ trigger.to_state.attributes['android.text'] }}
        {%- endif %}
      repeat: 2
      textCase: 2
      pushIcon: 2
  - platform: state
    entity_id: binary_sensor.doorbell_button
    to: "on"
    variables:
      icon: dingdong
      text: Ding Dong!
      background: 4CBEFC

  # app - graph
  - platform: state
    entity_id: binary_sensor.raindata
    variables:
      update: "{{ trigger.to_state.state in ['on', 'off'] }}"
      icon: rainy
      graph_max: 8
      graph_data: "{{ trigger.to_state.attributes.raindata.data if trigger.to_state.state == 'on' else none }}"
      graph_type: bar
      graph_color: [0, 0, 255]
      graph_round: ceil
      app: rain
      deactivate: "{{ trigger.to_state.state != 'on' }}"
variables:
  plot_graph: "{{ graph_data is defined and graph_data is not string and graph_data is iterable }}"
condition:
  - "{{ update | default(true) | bool(true) }}"
  - "{{ deactivate is defined or plot_graph is defined or text is defined }}"
action:
  - if: "{{ deactivate | default(false) }}"
    then:
      - alias: "Deactivate app"
        service: mqtt.publish
        data:
          qos: 0
          retain: false
          topic: awtrix_dd3300/custom/{{ app }}
          payload: ""
    else:
      - alias: "Update custom app or send notification"
        service: mqtt.publish
        data:
          qos: 0
          retain: false
          topic: awtrix_dd3300/{{ 'notify' if app | default('notify') == 'notify' else ('custom/' ~ app) }}
          payload: >
            {%- set graph_type = graph_type | default('bar') %}
            {%- set graph_round = graph_round | default('common') %}
            {%- set grap_round = graph_round if graph_round in [ 'common', 'ceil', 'floor'] else 'common' %}
            {%- set autoscale = not iif(graph_max | default(none)) if plot_graph else none %}
            {%- set icon = icon | default() %}
            {%- set color = graph_color | default(none) if plot_graph else text_color | default(none) %}
            {%- set data = (graph_data[:11] if icon else graph_data[:16]) if plot_graph else [] %}
            {%- set data = data
                            | select('is_number')
                            | map('multiply', 8/graph_max | default(8))
                            | map('round', 0, graph_round)
                            | map('int')
                            | list
            %}
            {%- set graph_data = { graph_type: (data[:11] if icon else data[:16]) if plot_graph else none }%}
            {%- set data = dict(
                              graph_data,
                              autoscale = autoscale,
                              text = text if not plot_graph else none,
                              repeat = repeat | default(none),
                              rainbow = rainbow | default(none),
                              icon = icon | default(none),
                              pushIcon = pushIcon | default(none),
                              textCase = textCase | default(none),
                              color = color | default(none),
                              background = background | default(none)
                              )
            %}
            {%- set data = dict(data.items() | rejectattr('1', 'none')) %}
            {{ data | to_json }}
