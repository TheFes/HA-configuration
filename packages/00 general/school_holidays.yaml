# Package to create the entities needed for the Dutch School Holiday binary sensor using the API provided
# by the Rijksoverheid
# API information: https://www.rijksoverheid.nl/opendata/schoolvakanties

# input_select to select the correct region (North, Middle or South)
input_select:
  region:
    name: Regio Schoolvakanties
    options:
      - Noord
      - Midden
      - Zuid
    icon: mdi:map-marker

# Rest Command to get the data from the endpoint
rest_command:
  school_holidays:
    url: https://opendata.rijksoverheid.nl/v1/infotypes/schoolholidays?output=json

# Binary sensor which will be "on" in case it is currently a school holiday.
# The attributes show the selected region, the current holiday and a the upcoming holidays for the current school year (next school year in case it's summer holiday)
template:
  - triggers:
      - platform: time
        at: "00:00"
      - platform: event
        event_type: update_school_holidays
    actions:
      - action: rest_command.school_holidays
        response_variable: holidays
      - variables:
          data: >
            {% set region = states('input_select.region') | lower %}
            {% set holidays = holidays.get('content', []) | map(attribute='content') | sum(start=[]) | map(attribute='vacations') | sum(start=[]) %}
            {% set ns = namespace(holidays={}) %}
            {% for h in holidays %}
              {% set type = h.type | trim %}
              {% set compulsory = h.compulsorydates | bool %}
              {% set date_info = h.regions | selectattr('region', 'search', region~'|heel Nederland') | first %}
              {% set start = as_local(as_datetime(date_info.startdate)).date() | string %}
              {% set end = as_local(as_datetime(date_info.enddate)).date() | string %}
              {% set year, month = as_datetime(start).year, as_datetime(start).month %}
              {% set startyear = year - 1 if month <= 8 else year %}
              {% set schoolyear = startyear ~ '-' ~ (startyear + 1) %}
              {% if end >= now().date() | string %}
                {% set yeardata = ns.holidays.get(schoolyear, []) + [dict(type=type, compulsory=compulsory, start=start, end=end)] %}
                {% set ns.holidays = dict(ns.holidays, **{schoolyear:yeardata}) %}
              {% endif %}
            {% endfor %}
            {% set yr = (ns.holidays.items() | map(attribute='1') | sum(start=[]) | selectattr('type', 'eq', 'Zomervakantie') | map(attribute='start') | list | first | as_datetime).year %}
            {% set current_sy = (yr - 1) ~ '-' ~ yr %}
            {% set current = ns.holidays.get(current_sy, []) | selectattr('start', '<=', now().date() | string) | selectattr('end', '>=', now().date() | string) | first | default({}) %}
            {% set upcoming = ns.holidays.get(current_sy, []) | rejectattr('type', 'eq',current.get('type')) | list %}
            {% set upcoming = upcoming if upcoming else ns.holidays.get(current_sy.split('-') | map('add', 1) | map('int') | join('-'), []) %}
            {% set data = dict(current=current, upcoming=upcoming) %}
            {{ data }}
    binary_sensor:
      unique_id: 4d816314-1eaf-41d0-ab16-ec3c57bac38f5
      name: Schoolvakantie
      state: "{{ iif(data.current) }}"
      attributes:
        regio: "{{ states('input_select.region') }}"
        nu: "{{ data.current.get('type', 'Geen vakantie')}}"
        vakanties: "{{ data.upcoming }}"
