## SCRIPT TO STORE THE DATA ##
script:
  plot_energy_usage:
    alias: "00 - Plot energy usage"
    icon: mdi:brightness-percent
    mode: parallel
    max: 20
    max_exceeded: silent
    fields:
      sensor:
        description: "Select energy sensor"
        name: Energy Sensor
        example: sensor.dishwasher_energy
        required: true
        selector:
          entity:
            domain: sensor
            device_class: energy
      description:
        description: "Description for the plot"
        name: Description
        example: 120
        required: true
        selector:
          text:
      no_weight_points:
        description: "Number of weight points/hour"
        name: Weight points
        default: 1
        example: 3
        required: true
        selector:
          number:
            min: 0
            max: 12
            step: 1
            mode: slider
      stop_entity:
        description: "Entity to use to stop the plot"
        example: input_boolean.dishwasher_off
        required: true
        selector:
          entity:
      stop_state:
        description: "State the entity should have to stop the plot"
        example: "off"
        required: true
        selector:
          text:
    sequence:
      - variables:
          not_defined: >
            {{ [
                  'energy sensor' if sensor is not defined or not sensor else none,
                  'stop entity' if stop_entity is not defined or not stop_entity else none,
                  'stop state' if stop_state is not defined else none
                ] | reject('none') | list
            }}
      - if: "{{ not_defined | count > 0 }}"
        then:
          - stop: >
              {{ not_defined | join(', ') }} {{ 'is' if not_defined | count == 1 else 'are'}} not defined, script has stopped
            error: true
      - variables:
          description: "{{ description | default('unknown') }}"
          no_weight_points: "{{ no_weight_points | default(4) | int(4) }}"
      - repeat:
          until:
            - condition: template
              value_template: "{{ is_state(stop_entity, stop_state) }}"
          sequence:
            - variables:
                sensor_state: "{{ states(sensor) | float('na') }}"
            - if: "{{ not sensor_state | is_number }}"
              then:
                - stop: "Received non numeric state, script has stopped"
                  error: true
            - event: update_energy_plot
              event_data:
                description: "{{ description }}"
                status: "{{ 'first' if repeat.first else 'ongoing' }}"
                state: "{{ sensor_state }}"
                no_weight_points: "{{ no_weight_points }}"
            - delay:
                minutes: "{{ 60 / no_weight_points }}"
      - event: update_energy_plot
        event_data:
          description: "{{ description }}"
          no_weight_points: "{{ no_weight_points }}"
          status: complete

## TEMPLATE SENSOR TO STORE THE DATA ##
template:
  - trigger:
      - platform: event
        event_type: update_energy_plot
    sensor:
      - unique_id: 36c9491c-2e16-4fc3-bc9f-a6ada5fc88b7
        name: Energy plots
        state: OK
        attributes:
          energy_plots: >
            {%- set c = this.attributes.get('energy_plots', {}) -%}
            {%- if trigger.event.data is defined -%}
              {%- set d = trigger.event.data.description | default('unknown') -%}
              {%- set s = trigger.event.data.state | default(0) -%}
              {%- set st = trigger.event.data.status | default('unknown') -%}
              {%- set wp = trigger.event.data.no_weight_points | default(none) %}
              {%- if st == 'remove' -%}
                {{ dict(c.items() | rejectattr('0', 'eq', d)) }}
              {%- else -%}
                {%- if st == 'first' -%}
                  {%- set p = {d: dict(data=[], state=s, no_weight_points=wp, complete=false)} -%}
                {%- elif st == 'complete' -%}
                  {%- set data = c.get(d, {}).get('data', []) -%}
                  {%- set no_zero = data | select() | list -%}
                  {%- set factor = 1 / no_zero | min if no_zero else 0 -%}
                  {%- set data = data | map('multiply', factor) | map('round', 3) | list -%}
                  {%- set p = {d: dict(data=data, no_weight_points=wp, complete=true)} -%}
                {%- elif st == 'ongoing' -%}
                  {%- set data = c.get(d, {}).get('data', []) -%}
                  {%- set u = s - c.get(d, {}).get('state', 0) -%}
                  {%- set data = data + [u | round(3)] -%}
                  {%- set p = {d: dict(data=data, state=s, no_weight_points=wp, complete=false)} -%}
                {%- else -%}
                  {%- set p = {} -%}
                {%- endif -%}
                {{ dict(c, **p) }}
              {%- endif -%}
            {%- else -%}
              {{ c }}
            {%- endif -%}

## AUTOMATION TO START THE SCRIPT ##
automation:
  - id: 2794cd64-a5d0-48e3-9edb-08527ac231bc
    alias: "F02 - Plot Wasmachine Energy"
    trigger:
      - platform: state
        entity_id: sensor.wasmachine
        from: "off"
        to: "on"
    action:
      - service: script.turn_on
        target:
          entity_id: script.plot_energy_usage
        data:
          variables:
            description: >
              {%- set m = state_attr('sensor.wasmachine', 'current_course').split(' ')[0] | lower -%}
              {%- set t = state_attr('sensor.wasmachine', 'water_temp') | slugify -%}
              {%- set s = state_attr('sensor.wasmachine', 'spin_speed') -%}
              wasmachine_{{ m }}_{{ t }}_{{ s }}
            no_weight_points: 4
            stop_state: "off"
            sensor: sensor.wasmachine_energy
            stop_entity: sensor.wasmachine
