template:
  - trigger:
      - platform: event
        event_type: light_effect_blink
    sensor:
      - unique_id: 7b25c899-ec7d-48f3-b9c4-3f7fb7a08a68
        name: Blink Effect Active
        state: OK
        attributes:
          blink_active: >
            {% set current = this.attributes.get('blink_active', {}) %}
            {% set others = dict(current.items() | rejectattr('0', 'eq', trigger.event.data.light)) %}
            {% if trigger.event.data.effect is defined and trigger.event.data.light is defined %}
              {% set add = {trigger.event.data.light: trigger.event.data.effect} %}
              {{ dict(others, **add) }}
            {% elif trigger.event.data.light is defined %}
              {{ others }}
            {% else %}
              {{ current }}
            {% endif %}

script:
  light_blink:
    alias: "00 - Light blink"
    mode: parallel
    fields:
      light:
        description: "Select the light"
        name: Light
        example: light.livingroom
        required: true
        selector:
          entity:
            domain: light
            multiple: false
      toggle_entity:
        description: "Select the entity to toggle"
        name: Light
        example: switch.livingroom
        required: false
        selector:
          entity:
            multiple: false
      effect:
        description: Effect
        example: Fast Pulse
        required: true
        selector:
          select:
            options:
              - None
              - Fast Pulse
              - Slow Pulse
    sequence:
      - parallel:
          - sequence:
              - if: "{{ effect != 'None' }}"
                then:
                  - event: light_effect_blink
                    event_data:
                      light: "{{ light }}"
                      effect: "{{ effect }}"
                  - alias: "Create scene with current state"
                    service: scene.create
                    data:
                      scene_id: before_{{ light | replace('.', '_') }}
                      snapshot_entities: "{{ light }}"
                  - alias: "Blink loop"
                    repeat:
                      count: "{{ 20 if effect == 'Fast Pulse' else 10 }}"
                      sequence:
                        - variables:
                            domain: "{{ toggle_entity.split('.')[0] }}"
                        - alias: "Blink"
                          service: "{{ domain }}.toggle"
                          data:
                            entity_id: "{{ toggle_entity }}"
                        - alias: "Short delay between toggle"
                          delay: "{{ 0.5 if effect == 'Fast Pulse' else 1 }}"
                  - alias: "Restore scene"
                    service: scene.turn_on
                    target:
                      entity_id: scene.before_{{ light | replace('.', '_') }}
              - event: light_effect_blink
                event_data:
                  light: "{{ light }}"
              - stop:
          - sequence:
              - wait_template: "{{ not state_attr(light, effect) }}"
              - event: light_effect_blink
                event_data:
                  light: "{{ light }}"
              - alias: "Restore scene"
                service: scene.turn_on
                target:
                  entity_id: scene.before_{{ light | replace('.', '_') }}
              - stop:

light:
  - platform: template
    lights:
      booglamp:
        unique_id: 85d30c5c-f581-40bd-a048-162d10dcfd60
        friendly_name: "Booglamp"
        icon_template: mdi:floor-lamp
        value_template: &value >
          {% set id = this.entity_id | regex_replace('light.|_template', '') %}
          {{
            is_state('switch.shelly1_' ~ id, 'on')
            or is_state('switch.' ~ id, 'on')
            or this.entity_id in state_attr('sensor.blink_effect_active', 'blink_active') | default({}, true)
          }}
        availability_template: &availability >
          {% set id = this.entity_id | regex_replace('light.|_template', '') %}
          {{ ('switch.shelly1_' ~ id) | has_value or ('switch.' ~ id) | has_value }}
        turn_on: &turn_on
          - service: switch.turn_on
            target:
              entity_id: >
                {% set id = this.entity_id | regex_replace('light.|_template', '') %}
                {{ [ 'switch.shelly1_' ~ id, 'switch.' ~ id] | select('has_value') | list | first }}
        turn_off: &turn_off
          - service: switch.turn_off
            target:
              entity_id: >
                {% set id = this.entity_id | regex_replace('light.|_template', '') %}
                {{ [ 'switch.shelly1_' ~ id, 'switch.' ~ id] | select('has_value') | list | first }}
        effect_list_template: &effect_list "{{ ['Fast Pulse', 'Slow Pulse', 'None'] }}"
        effect_template: &effect "{{ state_attr('sensor.blink_effect_active', 'blink_active')[this.entity_id] | default('None') }}"
        set_effect: &set_effect
          - service: script.turn_on
            target:
              entity_id: script.light_blink
            data:
              variables:
                light: "{{ this.entity_id }}"
                toggle_entity: >
                  {% set id = this.entity_id | regex_replace('light.|_template', '') %}
                  {{ [ 'switch.shelly1_' ~ id, 'switch.' ~ id] | select('has_value') | list | first }}
                effect: "{{ effect }}"

      voordeur:
        unique_id: 88a90466-f1d2-48ae-af0b-7c4494141148
        friendly_name: "Voordeur"
        icon_template: mdi:coach-lamp
        value_template: *value
        availability_template: *availability
        turn_on: *turn_on
        turn_off: *turn_off
        effect_list_template: *effect_list
        effect_template: *effect
        set_effect: *set_effect

      nijntje:
        unique_id: 18918667-0bde-4ed3-a753-9860aa9e9596
        friendly_name: "Nijntje"
        icon_template: mdi:rabbit-variant
        value_template: *value
        availability_template: *availability
        turn_on: *turn_on
        turn_off: *turn_off
        effect_list_template: *effect_list
        effect_template: *effect
        set_effect: *set_effect
