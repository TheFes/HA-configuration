sensor:
  - platform: ade7953
    current_a:
      name: Current 2
      internal: true
    active_power_a:
      name: Power 2
      id: power_channel_2
      filters:
        - lambda: return abs(x);
      on_value_range:
        - above: ${max_power}
          then:
            - switch.turn_off: relay_2
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: Message from ${name}
                data_template:
                  message: Switch 2 turned off because power exceeded ${max_power}W
    update_interval: 30s

  - platform: total_daily_energy
    name: Energy 2
    power_id: power_channel_2
    filters:
      # Multiplication factor from W to kWh is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

status_led:
  pin:
    number: GPIO0
    inverted: yes

switch:
  - platform: gpio
    id: relay_2
    name: " 2"
    pin: ${switch_pin_2}
    restore_mode: ${restore_mode_2}

select:
  - platform: template
    name: Button Type 2
    id: button_type_select_2
    entity_category: config
    options:
      - Detached
      - Momentary
      - Toggle
      - Events Only
    optimistic: true
    restore_value: true
    on_value:
      then:
        - text_sensor.template.publish:
            id: button_type_state_2
            state: !lambda "return id(button_type_select_2).state;"

binary_sensor:
  - platform: gpio
    id: wall_button_2
    pin:
      number: ${binary_sensor_pin_2}
      inverted: ${binary_inverted}
    on_state:
      - if:
          condition:
            - text_sensor.state:
                id: button_type_state_2
                state: "Toggle"
          then:
            - switch.toggle: relay_2
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - if:
              condition:
                - api.connected:
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      device: ${name} 2
                      click_type: restart
          - button.press: restart_button
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - if:
              condition:
                - not:
                    - text_sensor.state:
                        id: button_type_state_2
                        state: "Toggle"
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      device: ${name} 2
                      click_type: triple
                - switch.toggle: relay_2
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - if:
              condition:
                - api.connected:
                - switch.is_on: relay_2
                - not:
                    - text_sensor.state:
                        id: button_type_state_2
                        state: "Toggle"
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      device: ${name} 2
                      click_type: double
              else:
                - if:
                    condition:
                      not:
                        - text_sensor.state:
                            id: button_type_state_2
                            state: "Events Only"
                    then:
                      - switch.toggle: relay_2
      - timing:
          - state: true
            min_length: ${long_press}
        then:
          - if:
              condition:
                - api.connected:
                - switch.is_on: relay_2
                - not:
                    - text_sensor.state:
                        id: button_type_state_2
                        state: "Toggle"
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      device: ${name} 2
                      click_type: long
              else:
                - if:
                    condition:
                      not:
                        - text_sensor.state:
                            id: button_type_state_2
                            state: "Events Only"
                    then:
                      - switch.toggle: relay_2
      - timing:
          - ON for at most 1s
          - OFF for at least 0.25s
        then:
          - if:
              condition:
                - api.connected:
                - switch.is_on: relay_2
                - or:
                    - text_sensor.state:
                        id: button_type_state_2
                        state: "Detached"
                    - text_sensor.state:
                        id: button_type_state_2
                        state: "Events Only"
              then:
                - homeassistant.event:
                    event: esphome.button_pressed
                    data:
                      device: ${name}
                      click_type: short
              else:
                - if:
                    condition:
                      - or:
                          - text_sensor.state:
                              id: button_type_state_2
                              state: "Detached"
                          - text_sensor.state:
                              id: button_type_state_2
                              state: "Momentary"
                    then:
                      - switch.toggle: relay_2
    on_release:
      then:
        - homeassistant.event:
            event: esphome.button_pressed
            data:
              device: ${name}
              click_type: release

text_sensor:
  - platform: homeassistant
    entity_id: ${connected_light_2}
    id: light_status_2
    internal: true
  - platform: template
    internal: true
    id: button_type_state_2
    lambda: |-
      return id(button_type_select_2).state;
