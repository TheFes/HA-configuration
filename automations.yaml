- alias: 00 - Google Home Automatic Resume
  id: 417395bc-bd64-40a3-b20a-9062d426a01f
  mode: parallel
  max_exceeded: silent
  trigger:
    - platform: event
      event_type: call_service
      event_data:
        domain: media_player
        service: play_media
        service_data:
          announce: true
      variables:
        announce_volume: 0.4
      id: play
    - platform: event
      event_type: call_service
      event_data:
        domain: cast
        service: show_lovelace_view
      id: cast
  variables:
    entities: >
      {% set groups = states.group
                | selectattr('entity_id', 'search', 'resume_script_active_ghresume_')
                | map(attribute='entity_id')
                | list
      %}
      {% set active = expand(groups)
                        | rejectattr('state', 'in', ['unkown', 'unavailable'])
                        | map(attribute='entity_id')
                        | unique
                        | list
      %}
      {% set e = trigger.event.data.service_data.entity_id %}
      {{ ((e | replace(' ', '')).split(',') if e is string else e) | reject('in', active) | list }}
  condition:
    - condition: template
      value_template: "{{ entities | select('in', integration_entities('cast') + integration_entities('mass')) | list | count > 0 }}"
  action:
    - alias: Variable for version number
      variables:
        version: 0.2.0
    - alias: Are there Spotify entities?
      if: "{{ integration_entities('spotify') | count > 0 }}"
      then:
        - alias: Update Spotify entities
          service: homeassistant.update_entity
          target:
            entity_id: "{{ integration_entities('spotify') }}"
    - alias: Set variables to be used in the script
      variables:
        start_time: "{{ now() }}"
        cast_mass_playing: |
          {{
            expand(integration_entities('cast'))
              | selectattr('attributes.media_title', 'defined')
              | selectattr('attributes.media_title', 'search', 'Streaming from Music Assistant')
              | map(attribute='entity_id')
              | list
          }}
        mass_playing: >
          {{ (cast_mass_playing | join(',') | replace('.', '.mass_')).split(',') |
          select() | list }}
        player_data: >
          {%- set ns = namespace(info=[]) %}
          {%- for entity in expand(integration_entities('cast')) %}
            {%- set general = dict(
                                    data_source = 'automation',
                                    entity_id = entity.entity_id,
                                    state = entity.state
                                    )
            %}
            {%- if mass_entities | count > 0 %}
              {%- set mass_data = dict(
                                        mass_playing = entity.entity_id in cast_mass_playing,
                                        mass_sync = entity.entity_id | replace('.', '.mass_')
                                      )
              %}
              {%- set general = dict(general, **mass_data) %}
            {%- endif %}
            {%- if entity.attributes.app_name is defined and entity.attributes.app_name == 'Spotify' %}
              {%- set additional = dict(
                                        app_name = 'Spotify',
                                        volume_level = entity.attributes.volume_level,
                                        media_position =  as_timestamp(now()) | round(2)
                                                          - as_timestamp(entity.attributes.get('media_position_updated_at', now())) | round(2) 
                                                          + entity.attributes.get('media_position', 0)
                                        )
              %}
            {%- elif entity.attributes.app_name is defined and entity.attributes.app_name in ['YouTube', 'YouTube Music'] %}
              {%- set additional = dict(
                                        app_name = entity.attributes.app_name,
                                        volume_level = entity.attributes.volume_level,
                                        media_content_id = entity.attributes.get('media_content_id', 'no media_content'),
                                        media_position =  as_timestamp(now()) | round(2)
                                                          - as_timestamp(entity.attributes.get('media_position_updated_at', now())) | round(2) 
                                                          + entity.attributes.get('media_position', 0)
                                        )
              %}
            {%- elif entity.state == 'playing' %}
              {%- set additional = dict(
                                        app_name = entity.attributes.app_name,
                                        volume_level = entity.attributes.volume_level,
                                        media_content_id = entity.attributes.get('media_content_id', 'no media_content'),
                                        media_title = entity.attributes.get('media_title', 'no title'),
                                        media_artist = entity.attributes.get('media_artist', 'no artist'),
                                        media_content_type = entity.attributes.get('media_content_type', 'no type'),
                                        entity_picture = entity.attributes.get('entity_picture', 'no pic'),
                                        media_position =  as_timestamp(now()) | round(2)
                                                          - as_timestamp(entity.attributes.get('media_position_updated_at', now())) | round(2) 
                                                          + entity.attributes.get('media_position', 0)
                                        )
              %}
            {%- elif not entity.state in ['off', 'unavailable', 'unknown'] %}
              {%- set additional = dict( volume_level = entity.attributes.volume_level ) %}
            {%- endif %}
            {% set ns.info = ns.info + [ dict(general, **additional) if additional is defined else general ] %}
          {%- endfor %}
          {{ ns.info }}
        ytube_music_data: >
          {%- set ns = namespace(ytube = []) %}
          {%- for item in expand(integration_entities('ytube_music_player'))
                          | selectattr('state', 'eq', 'playing')
          %}
            {%- set ns.ytube = ns.ytube + [
                                            dict(
                                                  player = item.entity_id,
                                                  target = item.attributes.remote_player_id,
                                                  position =  as_timestamp(now()) | round(2)
                                                              - as_timestamp(entity.attributes.get('media_position_updated_at', now())) | round(2) 
                                                              + entity.attributes.get('media_position', 0),
                                                  data_source = 'voice_script'
                                                )
                                          ]
            %}
          {%- endfor %}
          {{ ns.ytube }}
        spotify_data: >
          {%- set entities = expand(integration_entities('spotify'))
                              | selectattr('state', 'eq', 'playing')
          %}
          {%- set ns = namespace(info=[]) %} {%- for entity in entities %}
            {%- set ns.info = ns.info + [
                                          dict(
                                                entity_id = entity.entity_id, 
                                                source = entity.attributes.source,
                                                data_source = 'voice_script'
                                              ) 
                                        ] 
            %}
          {%- endfor %}
          {{ ns.info }}
        target_list: >
          {{
            (integration_entities('cast') + integration_entities('mass'))
              | select('in', entities)
              | list
          }}
    - alias: Create snapshot of active Music Assistant entities
      repeat:
        for_each: "{{ mass_playing }}"
        sequence:
          - alias: Create snapshot
            service: mass.queue_command
            target:
              entity_id: "{{ repeat.item }}"
            data:
              command: snapshot_create
    - if: "{{ trigger.id == 'play' and announce_volume is defined and iif(announce_volume) }}"
      then:
        - wait_template: "{{ is_state(entities|first, 'idle') }}"
        - alias: Set volume for announcement
          service: media_player.volume_set
          target:
            entity_id: "{{ entities }}"
          data:
            volume_level: "{{ announce_volume }}"
    - alias: Interrupt YouTube music if needed
      if: "{{ ytube_music_data | count > 0 }}"
      then:
        - service: ytube_music_player.call_method
          data:
            entity_id: "{{ ytube_music_data | selectattr('target', 'in', target_list) | map(attribute='player') | list }}"
            command: interrupt_start
    - alias: Send actions using Google Home Resume script
      service: script.turn_on
      target:
        entity_id: script.google_home_resume
      data:
        variables:
          start_time: "{{ start_time }}"
          automation: true
          target_list: "{{ target_list }}"
          player_data: "{{ player_data }}"
          spotify_data: "{{ spotify_data }}"
          ytube_music_data: "{{ ytube_music_data }}"
          cast_mass_playing: "{{ cast_mass_playing }}"
