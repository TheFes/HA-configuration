automation:
  - id: d6878855-2179-46fa-a1f2-069c6311746f
    alias: "Actions with wall buttons"
    mode: parallel
    max_exceeded: silent
    triggers:
      - alias: Trigger on button press event entity
        trigger: state
        entity_id:
          - event.sonof_werkkamer_martijn_plafond
          - event.sonoff_slaapkamer_plafond
          - event.shelly1_werkkamer_marleen_shelly1_werkkamer_marleen
          - event.sonoff_badkamer_zolder
          - event.sonoff_badkamerspiegel_zolder
          - event.shelly1_eettafel_shelly1_eettafel
          - event.dimmer_woonkamer_plafond
          - event.dimmer_overloop_overloop
          - event.dimmer_keuken
          - event.dimmer_badkamer_badkamer
          - event.shelly_badkamerspiegel_shelly1_badkamerspiegel
          - event.sonoff_floris_sonoff_floris
          - event.shelly1_pepijn_shelly1_pepijn
          - event.dimmer_zolder_zolder
          - event.sonoff_wasmachinehoek_sonoff_wasmachinehoek
          - event.dimmer_hal_hal
        not_from: unavailable
        variables:
          event: "{{ trigger.to_state.attributes.event_type | default('unknown', true) }}"
          area: "{{ area_id(trigger.entity_id) }}"
          floor: "{{ floor_id(trigger.entity_id) }}"
          relay: >
            {{ device_entities(device_id(trigger.entity_id))
                  | select('search', '^switch.*_relay')
                  | map('states')
                  | join
                  | default('No relay')
            }}
          dim_switch: >
            {{
              device_id(trigger.entity_id)
                | device_entities
                | select('search', 'switch.*_dim_down')
                | join
            }}
          dimmer: >
            {{
              device_entities(device_id(trigger.entity_id))
                | select('search', '^light.')
                | list
                | count > 0
            }}
          control_light: >
            {{
              dimmer or
              device_entities(device_id(trigger.entity_id))
                | select('search', '^select.*_button_type')
                | map('states')
                | join 
                | default('Detached', true) in ['Detached', 'Events Only']
            }}
          start_brightness: >
            {{
              device_entities(device_id(trigger.entity_id))
                | select('search', 'start_brightness')
                | map('states')
                | map('float', 100)
                | list
                | default([100], true)
                | average
            }}
          scope: >
            {{ device_entities(device_id(trigger.entity_id))
                  | select('search', '^select.*_long_press_scope')
                  | map('states')
                  | join
                  | default('Area', true)
            }}
          toggle: >
            {% set main = device_entities(device_id(trigger.entity_id))
                | select('search', '^select.*_connected_light_type')
                | map('states')
                | join
                | default('Main', true) == 'Main'
            %}
            {{ 'main_light' if main else 'support_light' }}
          long_press_entities: >
            {% if scope == 'Area' %}
              {{
                area_entities(area)
                  | select('in', label_entities('off_long_press'))
                  | list
              }}
            {% elif scope == 'Floor' %}
              {{
                floor_entities(floor)
                  | select('in', label_entities('off_long_press'))
                  | list
              }}
            {% elif scope == 'House' %}
              {{ label_entities('off_long_press') }}
            {% else %}
              {{
                area_entities(area)
                  | select('in', label_entities(toggle))
                  | list
              }}
            {% endif %}
          toggle_lights: >
            {{
              long_press_entities
                | select('in', area_entities(area))
                | select('in', label_entities(toggle))
                | list
            }}
    actions:
      - alias: "Click type?"
        choose:
          - alias: "Actions on single press event (toggle assigned lights)"
            conditions:
              - alias: "Short?"
                condition: template
                value_template: "{{ event == 'single_press' and control_light }}"
            sequence:
              - choose:
                  - alias: "Check if the button has a relay, if the relay is on and if any of the assigned lights is available"
                    conditions: >
                      {{
                        relay | has_value 
                        and
                          (
                            is_state(relay, 'off')
                            or toggle_lights | select('has_value') | list | count == 0
                          )
                      }}
                    sequence:
                      - alias: Toggle Relay
                        action: switch.toggle
                        target:
                          entity_id: "{{ relay }}"
                  - alias: Check if any of the assigned lights is on
                    conditions: "{{ toggle_lights | select('is_state', 'on') | list | count > 0 }}"
                    sequence:
                      - alias: Turn off lights
                        action: light.turn_off
                        target:
                          entity_id: "{{ toggle_lights }}"
                default:
                  - alias: Turn on lights
                    repeat:
                      for_each: "{{ toggle_lights }}"
                      sequence:
                        - alias: Set correct light settings for each light
                          variables:
                            data:
                              brightness_pct: >
                                {{
                                  start_brightness
                                    if repeat.item | has_value 
                                    and states[repeat.item].attributes.brightness is defined
                                  else 'na'
                                }}
                              kelvin: >
                                {% set kelvin_used = repeat.item | has_value 
                                    and states[repeat.item].attributes.min_color_temp_kelvin is defined
                                %}
                                {% if kelvin_used %}
                                  {% set k_min = state_attr(repeat.item, 'min_color_temp_kelvin') %}
                                  {% set k_max = state_attr(repeat.item, 'max_color_temp_kelvin') %}
                                  {{ ((k_max - k_min) * start_brightness / 100 + k_min) | round(0) }}
                                {% else %}
                                  na
                                {% endif %}
                        - alias: Turn each of the assigned lights on with the correct settings
                          action: light.turn_on
                          target:
                            entity_id: "{{ repeat.item }}"
                          data: "{{ dict(data.items() | selectattr('1', 'is_number')) }}"
                        - alias: Set dim toggle to either dim down or up
                          if: "{{ dim_switch | has_value }}"
                          then:
                            - alias: Set dim switch
                              action: switch.turn_{{ 'on' if start_brightness >= 50 else 'off' }}
                              target:
                                entity_id: "{{ dim_switch }}"
          - conditions:
              - alias: "Actions on double press event (100%)"
                condition: template
                value_template: "{{ event == 'double_press' and control_light }}"
            sequence:
              - alias: Turn each toggle light to 100% (if supported)
                repeat:
                  for_each: "{{ toggle_lights }}"
                  sequence:
                    - alias: Set correct light settings for each light
                      variables:
                        data:
                          brightness_pct: >
                            {{
                              100
                                if repeat.item | has_value
                                and states[repeat.item].attributes.brightness is defined
                              else 'na'
                            }}
                          kelvin: >
                            {{
                              state_attr(repeat.item, 'max_color_temp_kelvin')
                                if repeat.item | has_value 
                                and states[repeat.item].attributes.color_temp_kelvin is defined
                              else 'na'
                            }}
                    - alias: Turn on light on 100%
                      action: light.turn_on
                      target:
                        entity_id: "{{ repeat.item }}"
                      data: "{{ dict(data.items() | selectattr('1', 'is_number')) }}"
                    - alias: Set dim toggle to either dim down
                      if: "{{ dim_switch | has_value }}"
                      then:
                        - alias: Set dim switch
                          action: switch.turn_on
                          target:
                            entity_id: "{{ dim_switch }}"
          - conditions:
              - alias: "Actions for long press event (all lights off, or activate 'scene')"
                condition: template
                value_template: "{{ event == 'long_press' }}"
            sequence:
              - if: >
                  {{
                    scope != 'Custom'
                    and
                    long_press_entities
                      | select('has_value')
                      | select('is_state', ['on', 'playing'])
                      | list
                      | count > 0
                  }}
                then:
                  - alias: Turn off selected entities
                    action: homeassistant.turn_off
                    target:
                      entity_id: "{{ long_press_entities | select('has_value') | list }}"
                else:
                  - alias: Start script with actions for area
                    action: script.turn_on
                    target:
                      entity_id: script.long_press_button_actions
                    data:
                      variables:
                        area: "{{ area }}"
                        floor: "{{ floor }}"
                        scope: "{{ scope }}"
                        toggle: "{{ toggle }}"
                        long_press_entities: "{{ long_press_entities }}"
          - conditions:
              - alias: "Actions for short-long press event (Dim lights if supported)"
                condition: template
                value_template: "{{ event == 'single_long_press' and control_light }}"
            sequence:
              - variables:
                  dim_down: "{{ is_state(dim_switch, 'on') }}"
              - if: "{{ dim_down }}"
                then:
                  - alias: Press button to dim down
                    action: button.press
                    target:
                      entity_id: >
                        {{
                          long_press_entities
                            | map('device_id')
                            | map('device_entities')
                            | flatten
                            | select('search', '^button.*_dim_down')
                            | list
                        }}
                else:
                  - alias: Press button to dim down
                    action: button.press
                    target:
                      entity_id: >
                        {{
                          long_press_entities
                            | map('device_id')
                            | map('device_entities')
                            | flatten
                            | select('search', '^button.*_dim_up')
                            | list
                        }}
              - alias: Toggle dim switch
                action: switch.toggle
                target:
                  entity_id: "{{ dim_switch }}"
          - conditions:
              - alias: "Actions for button release event (Stop Dim)"
                condition: template
                value_template: "{{ event == 'release' and control_light }}"
            sequence:
              - alias: Stop dimming
                action: button.press
                target:
                  entity_id: >
                    {{
                      long_press_entities
                        | map('device_id')
                        | map('device_entities')
                        | flatten
                        | select('search', '^button.*_dim_stop')
                        | list
                    }}

  - id: 806efebe-1dd4-44c5-9087-c12b6a896bd0
    alias: Change start brightness for light buttons based on House Mode
    triggers:
      - trigger: state
        entity_id: sensor.house_mode
        to: ~
        variables:
          house_mode: "{{ trigger.to_state.state }}"
    actions:
      - alias: Set settings for number entities
        variables:
          settings:
            - entity: number.sonof_werkkamer_martijn_plafond_start_brightness
              when: Tandenpoetsen
              percentage: 30
            - entity: number.sonoff_slaapkamer_plafond_start_brightness
              when: Tandenpoetsen
              percentage: 30
            - entity: number.sonoff_badkamer_zolder_start_brightness
              when: Tandenpoetsen
              percentage: 30
            - entity: number.dimmer_woonkamer_plafond_start_brightness
              when: Tandenpoetsen
              percentage: 30
            - entity: number.dimmer_overloop_start_brightness
              when: Tandenpoetsen
              percentage: 30
            - entity: number.dimmer_keuken_start_brightness
              when: Tandenpoetsen
              percentage: 30
            - entity: number.shelly1_eettafel_start_brightness
              when: Tandenpoetsen
              percentage: 40
            - entity: number.dimmer_zolder_start_brightness
              when: Tandenpoetsen
              percentage: 30
            - entity: number.sonoff_wasmachinehoek_start_brightness
              when: Tandenpoetsen
              percentage: 30
            - entity: number.dimmer_hal_start_brightness
              when: Tandenpoetsen
              percentage: 30
            - entity: number.dimmer_badkamer_start_brightness
              when: Slapen
              percentage: 30
      - alias: Determine which actions to take
        choose:
          - alias: Actions when house mode changes to Thuis (in the morning)
            conditions: "{{ house_mode == 'Thuis'}}"
            sequence:
              - alias: Set all number entities to 100
                action: number.set_value
                target:
                  entity_id: "{{ settings | map(attribute='entity') | list }}"
                data:
                  value: 100
          - alias: Actions when house mode changes to Tandenpoetsen
            conditions: "{{ house_mode == 'Tandenpoetsen'}}"
            sequence:
              - alias: Set the selected number entiteis to the provided percentage
                repeat:
                  for_each: "{{ settings | selectattr('when', 'eq', house_mode) | list }}"
                  sequence:
                    - action: number.set_value
                      target:
                        entity_id: "{{ repeat.item.entity }}"
                      data:
                        value: "{{ repeat.item.percentage }}"
          - alias: Actions when house mode changes to Slapen
            conditions: "{{ house_mode == 'Slapen'}}"
            sequence:
              - alias: Set the selected number entiteis to the provided percentage
                repeat:
                  for_each: "{{ settings | selectattr('when', 'eq', house_mode) | list }}"
                  sequence:
                    - action: number.set_value
                      target:
                        entity_id: "{{ repeat.item.entity }}"
                      data:
                        value: "{{ repeat.item.percentage }}"

  - id: 4671f017-f0a9-41ad-ac00-360ed28398ae
    alias: Change long press lights for kids to ensure night light is kept on
    triggers:
      - trigger: state
        entity_id:
          - input_boolean.nachtlampje_pepijn
          - binary_sensor.pepijn_sleeping
          - input_boolean.nachtlampje_floris
          - binary_sensor.floris_sleeping
        to: ~
    actions:
      - alias: Assign variables to be used in action
        variables:
          area: "{{ area_id(trigger.entity_id) }}"
          boolean: >
            {{
              'input_boolean.nachtlampje_floris'
              if 'floris' in area
              else 'input_boolean.nachtlampje_pepijn'
            }}
      - alias: Add or remove off_long_press label to night light entity
        action: >
          {{
            'homeassistant.remove_label_from_entity'
              if
                trigger.to_state.state == 'on'
                and is_state(boolean, 'on')
            else 'homeassistant.add_label_to_entity'
          }}
        data:
          label_id:
            - off_long_press
          entity_id: >
            {{
              area_entities(area)
                | select('in', label_entities('night_light'))
                | list
            }}

script:
  dim_actions:
    alias: Dim light up/down
    mode: parallel
    fields:
      light:
        name: Light
        description: "Lights for dim action"
        required: true
        selector:
          entity:
            multiple: false
            filter:
              - domain: light
      dim_action:
        name: Dim Action
        description: Action to take on the light
        required: true
        selector:
          select:
            options:
              - up
              - down
              - stop
    sequence:
      - alias: Determine which actions to take
        choose:
          - alias: Actions on dim up action
            conditions: "{{ dim_action == 'up' }}"
            sequence:
              - alias: Assign dim up active label
                action: homeassistant.add_label_to_entity
                data:
                  entity_id: "{{ light }}"
                  label_id:
                    - dim_up_active
              - alias: Repeat dim up action until light if fully on or button is released
                repeat:
                  while:
                    - "{{ is_state(light, 'on') }}"
                    - "{{ light in label_entities('dim_up_active') }}"
                    - "{{ light not in label_entities('dim_down_active') }}"
                    - "{{ state_attr(light, 'brightness') | default(0, true) < 255 }}"
                  sequence:
                    - variables:
                        time: "{{ 0.5 if light in integration_entities('mqtt') else 0.1 }}"
                        step: "{{ 5 if light in integration_entities('mqtt') else 1 }}"
                    - alias: Dim up with right step
                      action: light.turn_on
                      target:
                        entity_id: "{{ light }}"
                      data:
                        brightness_step_pct: "{{ step }}"
                        transition: "{{ time }}"
                    - delay: "{{ time }}"
              - alias: Remove label after dim actions are done
                action: homeassistant.remove_label_from_entity
                data:
                  entity_id: "{{ light }}"
                  label_id:
                    - dim_up_active
          - alias: Actions on dim down action
            conditions: "{{ dim_action == 'down' }}"
            sequence:
              - alias: Assign dim down active label
                action: homeassistant.add_label_to_entity
                data:
                  entity_id: "{{ light }}"
                  label_id:
                    - dim_down_active
              - alias: Repeat dim down action until light if fully on or button is released
                repeat:
                  while:
                    - "{{ is_state(light, 'on') }}"
                    - "{{ light not in label_entities('dim_up_active') }}"
                    - "{{ light in label_entities('dim_down_active') }}"
                    - "{{ state_attr(light, 'brightness') | default(0, true) >= 3 }}"
                  sequence:
                    - variables:
                        time: "{{ 0.5 if light in integration_entities('mqtt') else 0.1 }}"
                        step: "{{ -5 if light in integration_entities('mqtt') else -1 }}"
                    - alias: Dim down with right step
                      action: light.turn_on
                      target:
                        entity_id: "{{ light }}"
                      data:
                        brightness_step_pct: "{{ step }}"
                        transition: "{{ time }}"
                    - delay: "{{ time }}"
              - alias: Remove label after dim actions are done
                action: homeassistant.remove_label_from_entity
                data:
                  entity_id: "{{ light }}"
                  label_id:
                    - dim_down_active
          - alias: Actions on dim stop action
            conditions: "{{ dim_action == 'stop' }}"
            sequence:
              - alias: Remove dim labels from entity
                action: homeassistant.remove_label_from_entity
                data:
                  entity_id: "{{ light }}"
                  label_id:
                    - dim_up_active
                    - dim_down_active

  long_press_button_actions:
    alias: Long Press Button Actions
    description: Actions to be performed on a long press event on a wall button
    mode: parallel
    sequence:
      - choose:
          - alias: Long press actions for Eettafel button
            conditions: "{{ area == 'eettafel' }}"
            sequence:
              - alias: "Turn off long press entities"
                action: homeassistant.turn_off
                target:
                  entity_id: >
                    {{
                      label_entities('off_long_press')
                        | reject('is_state', 'off')
                        | select('has_value')
                        | select('in', floor_entities(floor))
                        | list
                    }}
              - alias: "Extractor hood off if needed?"
                if:
                  - alias: "Extractor hood active"
                    condition: numeric_state
                    entity_id: sensor.afzuigkap_power
                    above: 0.5
                then:
                  - alias: "Turn off power plug extractor hood"
                    action: switch.turn_off
                    target:
                      entity_id: switch.afzuigkap
              - if:
                  - alias: "Bed time"
                    condition: time
                    after: "21:00:00"
                    before: "06:00:00"
                then:
                  - event: set_house_mode
                    event_data:
                      mode: Tandenpoetsen
          - alias: Long press actions for Floris
            conditions: "{{ area == 'slaapkamer_floris' }}"
            sequence:
              - alias: Run bedtime script for Floris
                action: script.turn_on
                target:
                  entity_id: script.bedtime_floris_routine
          - alias: Long press actions for Pepijn
            conditions: "{{ area == 'slaapkamer_pepijn' }}"
            sequence:
              - alias: Run bedtime script for Pepijn
                action: script.turn_on
                target:
                  entity_id: script.bedtime_pepijn_routine
