blueprint:
  name: Create a combined weather entity
  description:
    '# Creates a template weather which combines all your other weather
    integrations


    ## Trigger settings

    By default there are 3 triggers:

    * 30 seconds after every whole hour, to give all weather integrations some time
    to update.

    * Every time Home Assistant starts, to ensure the template weather
    uses up-to-date info

    * On the manual even `update_combined_forecast` to give an
    option to manually update

    You can add or remove triggers, or change the existing ones


    ## Input settings

    Here you can add weights to weather entities. In case you have a specific entity
    you trust more than others, you can apply additional weight. All weights need
    to be integers. The input needs to be a list, where each list item is a mapping.
    Weights can be applied for the current weather information (`current`), for for
    the 3 forecast types (`daily`, `twice_daily`, `hourly`). Example:

    ```yaml

    weight_input:

    - entity_id: weather.knmi

    current: 3

    daily: 3

    hourly: 4

    - entity_id: weather.buienradar

    current: 2

    daily: 2

    ```

    In the input settings you can also provide weather entiteis which should be ignored,
    e.g. when you have integrations configured for another location, e.g. where you
    will going on holiday.

    ## Unit of measurement settings

    Set the unit of measurements according to the source sensors. These are the defaults:

    ```yaml

    temperature_unit: "°C"

    pressure_unit: "hPa"

    wind_speed_unit: "km/h"

    visibility_unit: "km"

    precipitation_unit: "mm"

    ```


    ## Twice daily settings

    If no weather integration provides a twice daily foreast, it will be calculated based on the
    hourly forecast. In hte twice daily settings you can set the start time of the daytime and night
    period. By default these are `09:00:00` for daytime, and `18:00:00` for night, which is based on
    the twice daily forecast NWS provides.


    ## Debug mode

    With debug mode enabled, a summary of the information used will be sent as a persistent
    notification every time the template weather triggers. This is disabled by default.'
  author: TheFes
  source_url: https://github.com/TheFes/HA-configuration/blob/main/blueprints/template/TheFes/combined_weather.yaml
  domain: template
  input:
    trigger_settings:
      name: Trigger settings
      icon: mdi:play
      description: Add or remove triggers
      collapsed: true
      input:
        triggers:
          name: Triggers
          description: Triggers used
          selector:
            trigger: {}
          default:
            - alias:
                Update combined weather forecast every 5 minutes at 30 seconds 
                past the minute
              trigger: time_pattern
              minutes: "/5"
              seconds: "30"
            - alias: Update combined weather forecast on Home Assistant startup
              trigger: homeassistant
              event: start
            - alias: Update combined weather forecast on manual trigger event
              trigger: event
              event_type: update_combined_forecast
    input_settings:
      name: Input and round settings
      icon: mdi:cloud
      description: Settings to add weight or ignore specific entities
      collapsed: true
      input:
        weight_input:
          name: Weight data
          description:
            Provide weight data so integrations you trust more have a bigger
            impact
          selector:
            object:
              label_field: entity_id
              multiple: true
              fields:
                entity_id:
                  label: Weather entity
                  selector:
                    entity:
                      filter:
                        domain: weather
                current:
                  label: Current weather weight
                  selector:
                    number:
                      min: 0
                      max: 5
                      step: 1
                      mode: slider
                hourly:
                  label: Hourly forecast weight
                  selector:
                    number:
                      min: 0
                      max: 5
                      step: 1
                      mode: slider
                twice_daily:
                  label: Twice daily forecast weight
                  selector:
                    number:
                      min: 0
                      max: 5
                      step: 1
                      mode: slider
                daily:
                  label: Daily forecast weight
                  selector:
                    number:
                      min: 0
                      max: 5
                      step: 1
                      mode: slider
          default: []
        ignore_entities:
          name: Ignore entities
          description:
            Weather entities which should not be taken into account, e.g.
            because they are based on another location
          selector:
            entity:
              filter:
                - domain:
                    - weather
              multiple: true
              reorder: false
          default: []
        precision_input:
          name: Precision for numberic values
          description:
            Provide weight data so integrations you trust more have a bigger
            impact
          selector:
            object:
              label_field: attr
              description_field: round
              multiple: true
              fields:
                attr:
                  label: Forecast attribute
                  selector:
                    select:
                      options:
                        - label: Apparent temperature
                          value: apparent_temperature
                        - label: Cloud coverage
                          value: cloud_coverage
                        - label: Dew point
                          value: dew_point
                        - label: Humidity
                          value: humidity
                        - label: Ozone
                          value: ozone
                        - label: Pressure
                          value: pressure
                        - label: Temp low
                          value: temp_low
                        - label: Temperature
                          value: temperature
                        - label: Precipitation
                          value: precipitation
                        - label: Precipitation probability
                          value: precipitation_probability
                        - label: UV index
                          value: uv_index
                        - label: Visibility
                          value: visibility
                        - label: Wind bearing
                          value: wind_bearing
                        - label: Wind gust speed
                          value: wind_gust_speed
                        - label: Wind speed
                          value: wind_speed
                round:
                  label: Precision
                  selector:
                    number:
                      min: 0
                      max: 5
                      step: 1
                      mode: slider
          default:
            - attr: apparent_temperature
              round: 1
            - attr: cloud_coverage
              round: 0
            - attr: dew_point
              round: 1
            - attr: humidity
              round: 0
            - attr: ozone
              round: 2
            - attr: pressure
              round: 2
            - attr: templow
              round: 1
            - attr: temperature
              round: 1
            - attr: precipitation
              round: 2
            - attr: precipitation_probability
              round: 0
            - attr: uv_index
              round: 2
            - attr: visibility
              round: 1
            - attr: wind_bearing
              round: 2
            - attr: wind_gust_speed
              round: 0
            - attr: wind_speed
              round: 2
    unit_settings:
      name: Unit of measurement settings
      icon: mdi:eye
      description:
        Settings of the unit of measurements for the weather entity, make
        sure they match the source entities
      collapsed: true
      input:
        temperature_unit:
          name: Temperature
          description: The unit of meausurement used for temperature
          selector:
            text: {}
          default: °C
        pressure_unit:
          name: Pressure
          description: The unit of meausurement used for pressure
          selector:
            text: {}
          default: hPa
        wind_speed_unit:
          name: Wind speed
          description: The unit of meausurement used for wind speed
          selector:
            text: {}
          default: km/h
        visibility_unit:
          name: Wind speed
          description: The unit of meausurement used for wind visibility
          selector:
            text: {}
          default: km
        precipitation_unit:
          name: Wind speed
          description: The unit of meausurement used for precipitation
          selector:
            text: {}
          default: mm
    twice_daily_settings:
      name: Twice daily settings
      icon: mdi:eye
      description: Settings used to create a twice daily forecast in case none
        of the weahter integrations provide it
      collapsed: true
      input:
        start_daytime:
          name: Daytime start
          description: The start time of the daytime period
          selector:
            time: {}
          default: "09:00:00"
        start_night:
          name: Night start
          description: The start time of the night period
          selector:
            time: {}
          default: "18:00:00"
    debug_mode:
      name: Debug mode
      icon: mdi:bug
      description: Enable or disable debug mode
      collapsed: true
      input:
        debug:
          name: Enable debug mode
          description:
            With debug mode enabled a persistent notification will be sent
            on every update of the weather entity. The notification will contain information
            on the forecast list and the entities used.
          selector:
            boolean: {}
          default: false
triggers: !input triggers
actions:
  - alias: Define variables based on inputs and for forecast attribute precision
    variables:
      debug: !input debug
      weight: !input weight_input
      start_daytime: !input start_daytime
      start_night: !input start_night
      precision: !input precision_input
      forecast_all:
        - condition
        - wind_bearing
        - cloud_coverage
        - temperature
        - wind_speed
        - precipitation
        - precipitation_probability
        - dew_point
        - uv_index
        - apparent_temperature
        - pressure
        - humidity
      forecast_daily:
        - templow
        - wind_gust_speed
      forecast_twice_daily:
        - is_daytime
  - alias: Set right forecast type
    variables:
      type: hourly
      supported:
        - 2
        - 3
        - 6
        - 7
  - alias: Get the forecast data from the entities
    sequence: &get_forecasts
      - alias: Get all entities which support the forecast type
        variables:
          weather_entities: >
            {{
              states.weather 
                | selectattr('attributes.supported_features', 'defined')
                | selectattr('attributes.supported_features', 'in', supported)
                | map(attribute='entity_id') 
                | reject('in', integration_entities('template'))
                | select('has_value')
                | list
            }}
      - alias: Get forecasts in case there are entities
        if: "{{ weather_entities | count > 0 }}"
        then:
          - alias: Set forecast available flag when entities found
            variables:
              forecast_available: true
          - alias: Get hourly forecast data out of selected entities
            action: weather.get_forecasts
            data:
              type: "{{ type }}"
            target:
              entity_id: "{{ weather_entities }}"
            response_variable: forecast
        else:
          - alias: Set forecast unavailable flag when no entities found
            variables:
              forecast_available: false
  - alias: Combine the forecasts in one
    variables:
      hourly_entities: "{{ weather_entities }}"
      hourly: &combine_forecasts >
        {# set number of days to use for forecasts #}
          {% set forecast_days = 3 if type == 'hourly' else 10 %}
        {# check if forecast is retreived #}
          {% if forecast_available %}
          {# combine all forecasts in one list #}
            {% if weight is defined
                and weight is list
                and weight | count > 0
                and weight[0] is mapping
            %}
              {% set ns = namespace(all=[]) %}
              {% for k, v in forecast.items() %}
                {% set w = weight
                            | selectattr('entity_id', 'eq', k)
                            | map(attribute=type)
                            | first
                            | default(1) %}
                {% set ns.all = ns.all + v.forecast * w %}
              {% endfor %}
              {% set all = ns.all %}
            {% else %}
              {% set all = forecast.values() | map(attribute='forecast') | sum(start=[]) %}
            {% endif %}
          {# make sure no old forecasts are included, and only 3 days for hourly forecasts, and 10 days for daily #}
            {% set compare_start = today_at() if type == 'daily' else now() - timedelta(hours=1) %}
            {% set compare_end = now() + timedelta(days=forecast_days) %}
          {# align datetimes so they all use local timezone, and the same start time for daily forecasts #}
            {% set ns = namespace(aligned=[], forecast=[]) %}
            {% for item in all if compare_start <= as_datetime(item.datetime) | as_local <= compare_end %}
              {% set new_dt = item.datetime | as_datetime(item.datetime) | as_local %}
              {% set new_dt = new_dt.isoformat() if type in ['hourly', 'twice_daily'] else new_dt.replace(hour=0, minute=0).isoformat() %}
              {% set ns.aligned = ns.aligned + [dict(item, datetime=new_dt)] %}
            {% endfor %}
          {# set list of unique datetime #}
            {% set dt_list = ns.aligned | map(attribute='datetime') | unique | sort | list %}
          {# create forecast list item for each datetime #}
            {% for dt in dt_list %}
              {% set forecasts = ns.aligned | selectattr('datetime', 'eq', dt) | list %}
              {% set dt_ns = namespace(keys=[], forecast=dict(datetime=dt)) %}
              {# find forecast available forecast items #}
                {% for item in forecasts %}
                  {% set dt_ns.keys = dt_ns.keys + item.keys() | list %}
                {% endfor %}
                {# remove unsupported types for template weather #}
                {% set allowed_keys = forecast_all if type == 'hourly' else forecast_all + forecast_daily if type == 'daily' else forecast_all + forecast_twice_daily %}
                {% set keys_list = dt_ns.keys | unique | select('in', allowed_keys) %}
              {# find value for each forecast item #}
                {% for key in keys_list %}
                  {% set key_items = forecasts | selectattr(key, 'defined') | map(attribute=key) | list %}
                  {# find most frequent item for condition #}
                    {% if key == 'condition' %}
                      {% if 'clear-night' in key_items %}
                        {% set key_items = key_items | map('replace', 'sunny', 'clear-night') | list %}
                      {% endif %}
                      {% set add_dict = dict(condition=statistical_mode(key_items, none)) %}
                      {% set dt_ns.forecast = dict(dt_ns.forecast, **add_dict) %}
                    {% elif key == 'is_daytime' %}
                      {% set add_dict = dict(is_daytime=key_items[0]) %}
                      {% set dt_ns.forecast = dict(dt_ns.forecast, **add_dict) %}
                  {# find median for other (numeric) forecast types #}
                    {% else %}
                      {# filter out non numeric values #}
                        {% set values = key_items  | map('replace', none, 0) | select('is_number') | map('float') | list | sort %}
                        {% if values | count > 0 %}
                          {# add forecast item to forecast #}
                            {% set round = precision | selectattr('attr', 'eq', key) | map(attribute='round') | list | first %}
                            {% set add_dict = {key: median(values)|round(round)} %}
                            {% set dt_ns.forecast = dict(dt_ns.forecast, **add_dict) %}
                        {% endif %}
                    {% endif %}
                {% endfor %}
              {# combine forecast for each datetime in one list #}
                {% set ns.forecast = ns.forecast + [dt_ns.forecast] %}
            {% endfor %}
          {# output the forecast #}
            {{ ns.forecast }}
        {# create twice daily forecast based on hourly forecast if not provided normally #}
        {% elif type == 'twice_daily' and hourly | count > 0 %}
          {% set times = hourly
                          | selectattr('datetime', 'search', 'T'~start_daytime~'|T'~start_night)
                          | map(attribute='datetime')
                          | list %}
          {% set hours_delta = (today_at(start_night) - today_at(start_daytime)).total_seconds() // 3600 %}
          {% set hours_day = hours_delta if hours_delta > 0 else 24 + hours_delta %}
          {% set ns = namespace(forecast=[], item={}) %}
          {% for t in times %}
            {% set day = t is search 'T' ~ start_daytime %}
            {% set dates = hourly | map(attribute='datetime') | list %}
            {% set index = dates.index(t) %}
            {% set data = hourly[index:(index+(hours_day if day else 24-hours_day)) | int] %}
            {% set key_list = data[0].keys() | list %}
            {% set ns.item = {'datetime': t, 'is_daytime': day} %}
            {% for key in key_list %}
              {% set key_items = data | selectattr(key, 'defined') | map(attribute=key) | list %}
              {% if key_items[0] is string %}
                {% if not day %}
                  {% set key_items = key_items | map('replace', 'sunny', 'clear-night') | list %}
                {% endif %}
                {% set ns.item = dict(ns.item, **{key: key_items | statistical_mode}) %}
              {% elif key == 'temperature' %}
                {% set ns.item = dict(ns.item, **{key: key_items | max, 'templow': key_items | min}) %}
              {% elif key_items[0] | is_number %}
                {% set r = precision | selectattr('attr', 'eq', key) | map(attribute='round') | first | default(1) %}
                {% set ns.item = dict(ns.item, **{key: key_items | average | round(r)}) %}
              {% endif %}
            {% endfor %}
            {% set ns.forecast = ns.forecast + [ns.item] %}
          {% endfor %}
          {{ ns.forecast }}
        {% else %}
          []
        {% endif %}
  - alias: Set right forecast type
    variables:
      type: daily
      supported:
        - 1
        - 3
        - 5
        - 7
  - alias: Get the forecast data from the entities
    sequence: *get_forecasts
  - alias: Combine the forecasts in one
    variables:
      daily_entities: "{{ weather_entities }}"
      daily: *combine_forecasts
  - alias: Set right forecast type
    variables:
      type: twice_daily
      supported:
        - 4
        - 5
        - 6
        - 7
  - alias: Get the forecast data from the entities
    sequence: *get_forecasts
  - alias: Combine the forecasts in one
    variables:
      twice_daily_entities: "{{ weather_entities }}"
      twice_daily: *combine_forecasts
  - alias: Set variable for weather entities for attributes
    variables:
      weather_entities: >
        {{
          states.weather
            | map(attribute='entity_id')
            | reject('in', integration_entities('template'))
            | select('has_value')
            | list
        }}
      current_values: >
        {% set ns = namespace(attributes=['condition'], values={}) %}
        {% for e in weather_entities %}
          {% set ns.attributes = ns.attributes + states[e].attributes.items() | selectattr('1', 'is_number') | map(attribute='0') | reject('eq', 'supported_features') | list %}
        {% endfor %}
        {% set attributes = ns.attributes | unique | list %}
        {% for a in attributes %}
          {% if weight is defined and weight is list and weight[0] is mapping %}
            {% set ns.weight = [] %}
            {% for e in weather_entities %}
              {% set w = weight | selectattr('entity_id', 'eq', e) | map(attribute='current') | first | default(1) %}
              {% set ns.weight = ns.weight + [states(e) if a == 'condition' else state_attr(e, a)] * w %}
            {% endfor %}
            {% set values = ns.weight | reject('none') | list %}
          {% else %}
            {% if a == 'condition' %}
              {% set values = weather_entities | map('states') | list %}
            {% else %}
              {% set values = weather_entities | map('state_attr', a) | select('is_number') | list %}
            {% endif %}
          {% endif %}
          {% set r = precision | selectattr('attr', 'eq', a) | map(attribute='round') | first | default(1) %}
          {% set value = values | statistical_mode if a == 'condition' else values | median(none) | round(r, default=none) %}
          {% set ns.values = dict(ns.values, **{a: value}) %}
        {% endfor %}
        {{ ns.values }}
  - alias: "Send debug notification if debug mode is enabled"
    if: "{{ debug | default(false) | bool(false) }}"
    then:
      - alias: Send notification with some debug date
        action: persistent_notification.create
        data:
          title: Weather Combined debug for
          message: |
            hourly: {{ hourly | count }} items
            hourly_entities: "{{ hourly_entities | join(', ') }}"
            daily: {{ daily | count }} items
            daily_entities: {{ daily_entities | join(', ') }}
            twice_daily: {{ twice_daily | count }} items
            twice_daily_entities: {{ twice_daily_entities | join(', ') }}
            current_values: {{ current_values }}

weather:
  condition_template: "{{ current_values.get('condition', none) }}"
  temperature_template: "{{ current_values.get('temperature', none) }}"
  apparent_temperature_template: "{{ current_values.get('apparent_temperature', none) }}"
  pressure_template: "{{ current_values.get('pressure', none) }}"
  wind_speed_template: "{{ current_values.get('wind_speed', none) }}"
  wind_gust_speed_template: "{{ current_values.get('wind_gust_speed', none) }}"
  visibility_template: "{{ current_values.get('visibility', none) }}"
  humidity_template: "{{ current_values.get('humidity', none) }}"
  wind_bearing_template: "{{ current_values.get('wind_bearing', none) }}"
  ozone_template: "{{ current_values.get('ozone', none) }}"
  cloud_coverage_template: "{{ current_values.get('cloud_coverage', none) }}"
  dew_point_template: "{{ current_values.get('dew_point', none) }}"
  temperature_unit: !input temperature_unit
  pressure_unit: !input pressure_unit
  wind_speed_unit: !input wind_speed_unit
  visibility_unit: !input visibility_unit
  precipitation_unit: !input precipitation_unit
  forecast_hourly_template: "{{ hourly }}"
  forecast_daily_template: "{{ daily }}"
  forecast_twice_daily_template: "{{ twice_daily }}"
