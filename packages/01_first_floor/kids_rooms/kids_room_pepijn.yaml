# From: actions_awtrix_buttons_pepijn.yaml
automation:
  - id: dc9ec434-0886-4fd3-a504-006ca6e8ec40
    alias: "Xiaomi button Bed Pepijn"
    mode: parallel
    max_exceeded: silent
    triggers:
      - trigger: event
        event_type: awtrix_button_event
        event_data:
          area: slaapkamer_pepijn
        variables:
          event: "{{ trigger.event.data.click }}"
          button: "{{ trigger.event.data.button }}"
    actions:
      - alias: "Which click type"
        choose:
          - conditions: "{{ event == 'single' }}"
            sequence:
              - action: light.toggle
                target:
                  entity_id: >
                    {%
                      set button_map = 
                        {
                          'left': 'light.booglamp',
                          'select': 'light.bed_pepijn',
                          'right': 'light.pepijn_leeslamp'
                        }
                    %}
                    {{ button_map[button] }}
          - conditions: "{{ event == 'hold' }}"
            sequence:
              - alias: "Light off"
                action: light.turn_off
                target:
                  entity_id: >
                    {{
                      area_entities('slaapkamer_pepijn')
                        | select('in', label_entities('off_long_press'))
                        | list
                    }}
          - conditions: "{{ event == 'double' }}"
            sequence: []
          - conditions: "{{ event == 'release' }}"
            sequence: []

  # From: actions_xiaomi_button_reading_light_pepijn.yaml
  - id: 012addf5-428e-45f9-9934-5cec9bc47f23
    alias: "Xiaomi button Graafmachine light Pepijn"
    triggers:
      - trigger: state
        entity_id: event.knop_pepijn_leeslamp_action
        not_from:
          - unavailable
          - unknown
        variables:
          event: "{{ trigger.to_state.attributes.event_type | default('unknown', true) }}"
    actions:
      - alias: "Which click type"
        choose:
          - alias: "Actions on short press"
            conditions: "{{ event == 'single' }}"
            sequence:
              - alias: "Turn on reading light"
                action: light.toggle
                target:
                  entity_id:
                    - light.booglamp
          - alias: "Actions on long press"
            conditions: "{{ event == 'hold' }}"
            sequence:
              - alias: "Activate script"
                action: script.turn_on
                target:
                  entity_id: script.bedtime_pepijn_routine
                data:
                  variables:
                    use_tts: true
          - alias: "Actions on double press"
            conditions: "{{ event == 'double' }}"
            sequence: []
          - alias: "Actions on release"
            conditions: "{{ event == 'release' }}"
            sequence: []

  # From: sleeplight_orange_green.yaml
  - id: 55509fd0-bdce-4cd2-86dc-2a8bee22b1b0
    alias: "Turn reading light orange or green just before wake time"
    mode: queued
    triggers:
      - trigger: template
        value_template: >
          {% set end = today_at(states('input_datetime.pepijn_time_awake')) %}
          {% set start = end - timedelta(minutes=states('input_number.leestijd_pepijn')|int) %}
          {{ start < now() < end }}
        id: orange
      - trigger: time
        at: input_datetime.pepijn_time_awake
        id: green
      - trigger: time
        at: "21:00:00"
        id: time_check
    conditions:
      - not:
          - alias: "Not on holiday"
            condition: state
            entity_id: sensor.house_mode
            state: "Vakantie"
      - alias: "Someone at home"
        condition: numeric_state
        entity_id: zone.home
        above: 0
      - alias: "Wakeup on"
        condition: state
        entity_id: input_boolean.pepijn_graafmachine
        state: "on"
    actions:
      - choose:
          - conditions: "{{ trigger is defined and trigger.get('id') == 'orange' }}"
            sequence:
              - action: script.turn_on
                target:
                  entity_id: script.transition_lights
                data:
                  variables:
                    lights:
                      - light.pepijn_leeslamp
                    br_start: 1
                    br_end: 255
                    rgb_start:
                      - 255
                      - 165
                      - 0
                    use_ct: false
                    duration: "{{ (today_at(states('input_datetime.pepijn_time_awake')) - now()).seconds }}"
                    split_action: true
                    max_steps: 90
          - conditions: "{{ trigger is defined and trigger.get('id') == 'green' }}"
            sequence:
              - action: script.turn_on
                target:
                  entity_id: script.transition_lights
                data:
                  variables:
                    lights:
                      - light.pepijn_leeslamp
                    use_br: false
                    use_ct: false
                    br_start: 255
                    rgb_start:
                      - 255
                      - 165
                      - 0
                    rgb_end:
                      - 0
                      - 237
                      - 0
                    duration: 10
                    mode: parallel
                    split_action: true
              - delay: 10
              - action: light.turn_on
                target:
                  entity_id: light.pepijn_leeslamp
                data:
                  rgb_color:
                    - 0
                    - 237
                    - 0
              - wait_template: "{{ is_state('light.pepijn_leeslamp', 'off')}}"
              - action: button.press
                data:
                  entity_id: button.reset_graafmachine_time
          - conditions: "{{ trigger is defined and trigger.get('id') == 'time_check' }}"
            sequence:
              - action: button.press
                target:
                  entity_id: button.set_time

  # From: update_ulanzi.yaml
  - id: 1bb3f63c-c210-4299-a36e-14e70a2e6950
    alias: "Update ulanzi Pepijn"
    mode: parallel
    triggers:
      - trigger: time_pattern
        seconds: "0"
      - trigger: state
        entity_id: binary_sensor.pepijn_sleeping
        from:
          - "on"
          - "off"
        to:
          - "on"
          - "off"
      - trigger: state
        entity_id: light.awtrix_pepijn_matrix
        from:
          - "unavailable"
      - trigger: state
        entity_id:
          - weather.combined
          - input_number.correction_clock_pepijn
        to: ~
    variables:
      correction: "{{ states('input_number.correction_clock_pepijn') | float(0) }}"
    actions:
      - if: "{{ is_state('binary_sensor.pepijn_sleeping', 'on') }}"
        then:
          - if: "{{ not is_state('select.awtrix_pepijn_brightness_mode', 'Manual') }}"
            then:
              - action: select.select_option
                data:
                  option: Manual
                target:
                  entity_id: select.awtrix_pepijn_brightness_mode
          - if: "{{ not is_state_attr('light.awtrix_pepijn_matrix', 'brightness', 2) }}"
            then:
              - action: light.turn_on
                target:
                  entity_id: light.awtrix_pepijn_matrix
                data:
                  brightness: 2
          - action: mqtt.publish
            data:
              qos: 0
              retain: false
              topic: awtrix_pepijn/custom/sleep_clock
              payload: >
                {% set n = now() + timedelta(hours=correction) %}
                {% set awake_time = today_at(states('input_datetime.pepijn_time_awake')) %}
                {% set awake_time = awake_time + timedelta(days=1) if n > awake_time else awake_time %}
                {% set read_time = awake_time - timedelta(minutes=states('input_number.leestijd_pepijn') | int) %}
                {% set qh = ((read_time - n).total_seconds() / 60 / 15) | round(0, 'ceil') %}
                {% set progress = [100 - int((100/24 * qh)), 0] | max if n < read_time or n > today_at('19:00') else 100 %}
                {% if read_time < n < awake_time %}
                  {% set icon = 'book' %}
                {% else %}
                  {% set icon = 'bed-up' if is_state('sensor.house_mode', 'Slapen') else 'bed-down' %}
                {% endif %}
                {{
                  dict(
                        icon = icon,
                        text = n.strftime('%-I:%M'),
                        color = [160,0,0],
                        progress = progress,
                        progressC = [0,0,0],
                        progressBC = [160,0,0]
                      )
                }}
        else:
          - action: mqtt.publish
            data:
              qos: 0
              retain: false
              topic: awtrix_pepijn/custom/sleep_clock
              payload: >
                {{
                  dict(
                        icon = states('weather.combined'),
                        text = (now() + timedelta(hours=correction)).strftime('%-I:%M')
                      )
                }}
          - if: "{{ not is_state('select.awtrix_pepijn_brightness_mode', 'Auto') }}"
            then:
              - action: select.select_option
                data:
                  option: Auto
                target:
                  entity_id: select.awtrix_pepijn_brightness_mode
      - if: "{{ not is_state('sensor.awtrix_pepijn_current_app', 'sleep_clock') }}"
        then:
          - action: mqtt.publish
            data:
              qos: 0
              retain: false
              topic: awtrix_pepijn/switch
              payload: "{{ dict(name = 'sleep_clock') }}"